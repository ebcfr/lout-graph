%!PS-Adobe-3.0
%%Creator: Basser Lout Version 3.40 (June 2013)
%%CreationDate: Thu Aug 22 10:59:14 2019
%%DocumentData: Binary
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentMedia: A4 595 842 0 white ()
%%PageOrder: Ascend
%%LanguageLevel: 2
%%Pages: (atend)
%%BoundingBox: 0 0 595 842
%%EndComments
%%BeginProlog
%%BeginResource: procset LoutStartUp
/cp_x 0 def
/cp_y 0 def
/louts 0 def
/loutv 0 def
/loutf 0 def
/ymark 0 def
/xmark 0 def
/ysize 0 def
/xsize 0 def
/save_cp { currentpoint /cp_y exch def /cp_x exch def } bind def
/restore_cp { cp_x cp_y moveto } bind def
/outline { gsave 1 1 1 setrgbcolor dup show save_cp
  grestore true charpath stroke restore_cp } bind def
/m  { 3 1 roll moveto show } bind def
/mo { 3 1 roll moveto outline } bind def
/s  { exch currentpoint exch pop moveto show } bind def
/so { exch currentpoint exch pop moveto outline } bind def
/k  { exch neg 0 rmoveto show } bind def
/ko { exch neg 0 rmoveto outline } bind def
/r  { exch 0 rmoveto show } bind def
/ro { exch 0 rmoveto outline } bind def
/c  { gsave 3 1 roll rmoveto show grestore } bind def
/co { gsave 3 1 roll rmoveto outline grestore } bind def
/ul { gsave setlinewidth dup 3 1 roll
      moveto lineto stroke grestore } bind def
/in { 1440 mul } bind def
/cm { 567 mul } bind def
/pt { 20 mul } bind def
/em { 120 mul } bind def
/sp { louts mul } def
/vs { loutv mul } def
/ft { loutf mul } def
/dg {           } def

/LoutGraphic {
  /louts exch def
  /loutv exch def
  /loutf exch def
  /ymark exch def
  /xmark exch def
  /ysize exch def
  /xsize exch def
} def

/LoutGr2 { gsave translate LoutGraphic gsave } def

/LoutFont
{ findfont exch scalefont setfont
} bind def

/LoutRecode {
  { findfont dup length dict begin
    {1 index /FID ne {def} {pop pop} ifelse} forall
    /Encoding exch def
    currentdict end definefont pop
  }
  stopped pop
} bind def

/PreEPSF_state 0 def
/dict_stack 0 def
/ops_count 0 def
/LoutStartEPSF { % prepare for EPSF inclusion
  /PreEPSF_state save def
  /dict_stack countdictstack def
  /ops_count count 1 sub def
  20 dict begin
  /showpage {} def
  0 setgray 0 setlinecap
  1 setlinewidth 0 setlinejoin
  10 setmiterlimit [] 0 setdash newpath
  /languagelevel where
  { pop languagelevel
    1 ne
    { false setstrokeadjust false setoverprint
    } if
  } if
} bind def

/LoutEPSFCleanUp { % clean up after EPSF inclusion
  count ops_count sub { pop } repeat
  countdictstack dict_stack sub { end } repeat
  PreEPSF_state restore
} bind def

% Find current texture (may be null)
% - LoutCurrentP p
/LoutCurrentP
{
  currentcolorspace
  0 get /Pattern eq
  {
    [ currentcolor ]
    dup length 1 sub get
  }
  {
    null
  } ifelse
} def

% Find current color and color space
% - LoutCurrentCCS c cs
/LoutCurrentCCS
{
  LoutCurrentP dup null eq
  {
    pop [ currentcolor ]
    currentcolorspace
  }
  {
    dup
    /UnderlyingColor get
    exch /UnderlyingColorSpace get
  } ifelse
} def

% Install c, cs, and (a copy of) p into graphics state
% c cs p LoutSetCCSP -
/LoutSetCCSP
{
  dup null eq
  {
    pop setcolorspace
    aload pop setcolor
  }
  {
    % copy pattern dictionary
    12 dict copy

    % record cs and c in p
    dup /UnderlyingColorSpace 3 index
    put
    dup /UnderlyingColor 4 index
    put

    % do setcolorspace and setcolor
    dup /PaintType get 1 eq
    {
      [ /Pattern ] setcolorspace
      setcolor
      pop pop
    }
    {
      [ /Pattern
      4 -1 roll
      ] setcolorspace
      exch aload length 1 add
      -1 roll
      setcolor
    } ifelse
  } ifelse
} bind def

% num LoutSetGray -
/LoutSetGray
{
  [ 2 1 roll ]
  [ /DeviceGray ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% r g b LoutSetRGBColor -
/LoutSetRGBColor
{
  [ 4 1 roll ]
  [ /DeviceRGB ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% h s b LoutSetHSBColor -
/LoutSetHSBColor
{
  gsave sethsbcolor
  currentrgbcolor grestore
  LoutSetRGBColor
} bind def

% c m y k LoutSetRGBColor -
/LoutSetCMYKColor
{
  [ 5 1 roll ]
  [ /DeviceCMYK ]
  LoutCurrentP
  LoutSetCCSP
} bind def

% p LoutSetTexture -
/LoutSetTexture
{
  LoutCurrentCCS
  3 -1 roll
  LoutSetCCSP
} bind def

% <scale > <scalex> <scaley> <rotate> <hshift> <vshift>
% <painttype> <bbox> <xstep> <ystep> <paintproc> LoutMakeTexture p
/LoutMakeTexture
{
  12 dict begin
  /PaintProc exch def
  /YStep exch def
  /XStep exch def
  /BBox exch def
  /PaintType exch def
  /PatternType 1 def
  /TilingType 1 def
  currentdict end
  7 1 roll
  matrix translate
  5 1 roll
  matrix rotate
  4 1 roll
  matrix scale
  exch dup matrix scale
  matrix concatmatrix
  matrix concatmatrix
  matrix concatmatrix
  /makepattern where
  {
    pop makepattern
  }
  {
    pop pop null
  } ifelse
} bind def

/LoutTextureSolid
{
  null
  LoutSetTexture
} bind def
%%EndResource

%%BeginResource: procset LoutDiagPrependGraphic
% @PrependGraphic file /usr/local/lib/lout/include/diagf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @Diag Jeffrey H. Kingston  %
%  Version 2.0 (includes CIRCUM label)                September 1996 %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%  To assist in avoiding name clashes, the names of all symbols      %
%  defined here begin with "ldiag".  However, this is not feasible   %
%  with user-defined labels and some labels used by users.           %
%                                                                    %
%  <point>      is two numbers, a point.                             %
%  <length>     is one number, a length                              %
%  <angle>      is one number, an angle in degrees                   %
%  <dashlength> is one number, the preferred length of a dash        %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errordict begin
   /handleerror
   {
      {  /Times-Roman findfont 8 pt scalefont setfont
	 0 setgray 4 pt 4 pt moveto
	 $error /errorname get
	 dup ldiagdict exch known
	 { ldiagdict exch get }
	 { 100 string cvs } ifelse
	 show
	 (  Command: ) show
	 $error /command get 100 string cvs show
      } stopped {} if
      showpage stop
   } def
end

% begin diagram: <maxlabels> ldiagbegin -
% must be defined outside ldiagdict since it loads it
/ldiagbegin
{ xsize 0 0 ysize ldiagdict begin
  5 -1 roll /ldiagmaxlabels exch def
  (@Diag) ldiagpushtagdict
  /OOY ldiagpointdef /OOX ldiagpointdef 0 0 /OOO ldiagpointdef
} def

% end diagram: - ldiagend -
/ldiagend
{ ldiagpoptagdict end
} def

% concat strings: <string> <string> ldiagconcat <string>
% must be defined outside ldiagdict since used in ldiagpromotelabels
/ldiagconcat
{ 2 copy length exch length add string
  dup 0 4 index putinterval
  dup 3 index length 3 index putinterval
  3 1 roll pop pop
} def

% mconcat strings: <string> <string> ldiagmconcat <string>
% returns concatenation, separated by @ if first is non-empty
% must be defined outside ldiagdict since used in ldiagpromotelabels
/ldiagmconcat
{
  2 copy length exch length add 1 add string
  dup 0 4 index putinterval
  dup 3 index length (@) putinterval
  dup 3 index length 1 add 3 index putinterval
  3 1 roll pop pop
} def

% show string in format start ... end: <string> ldiagsends <string>
/ldiagsends
{
  dup length 20 string cvs (: ) ldiagconcat exch
  dup 0 20 getinterval ( ... ) ldiagconcat
  3 -1 roll exch ldiagconcat
  exch dup length 20 sub 20 getinterval ldiagconcat
} def

/ldiagdebugposy 432 def
/ldiagdebugposx 72 def

% - ldiagdebugnextline -
/ldiagdebugnextline
{
  ldiagdebugposy 72 lt
  { /ldiagdebugposx ldiagdebugposx 144 add store
    /ldiagdebugposy 432 store
  }
  {
    /ldiagdebugposy ldiagdebugposy 12 sub store
  } ifelse
  ldiagdebugposx ldiagdebugposy moveto
} def

% - ldiagdebugbeginindent -
/ldiagdebugbeginindent
{
  /ldiagdebugposx ldiagdebugposx 12 add store
} def

% - ldiagdebugendindent -
/ldiagdebugendindent
{
  /ldiagdebugposx ldiagdebugposx 12 sub store
} def

% <string> <int> ldiagdebugprint -
% must be defined outside ldiagdict since used in arbitrary places
% print <string> plus count or <int> stack entries, whichever is the smaller
/ldiagdebugprint
{
  exch
  gsave
  initgraphics
  ldiagdebugnextline
  /Times-Roman findfont 10 scalefont setfont
  0 setgray show
  ldiagdebugbeginindent
  count 1 sub 2 copy lt { pop } { exch pop } ifelse 1 sub
  0 exch 1 exch
  {
    ldiagdebugnextline
    index
    dup type (dicttype) eq
    {
      (begin dict) show
      ldiagdebugbeginindent
      {
	ldiagdebugnextline
	pop 100 string cvs show
      } forall
      ldiagdebugendindent
      ldiagdebugnextline
      (end dict) show
    }
    {
      dup type (arraytype) eq
      {
        (begin array) show
        ldiagdebugbeginindent
	{
	  ldiagdebugnextline
	  100 string cvs show
	} forall
	ldiagdebugendindent
	ldiagdebugnextline
        (end array) show
      }
      {
        100 string cvs show
      } ifelse
    } ifelse
  } for
  ldiagdebugendindent
  grestore
} def

/ldiagdict 200 dict def
ldiagdict begin

% error messages
/dictfull (dictfull error:  too many labels?) def
/dictstackoverflow (dictstackoverflow error:  labels nested too deeply?) def
/execstackoverflow (execstackoverflow error:  figure nested too deeply?) def
/limitcheck (limitcheck error:  figure nested too deeply or too large?) def
/syntaxerror (syntaxerror error:  syntax error in text of figure?) def
/typecheck (typecheck error:  syntax error in text of figure?) def
/undefined (undefined error:  unknown or misspelt label?) def
/VMError (VMError error:  run out of memory?) def

% push pi onto stack:  - ldiagpi <num>
/ldiagpi 3.14159 def

% push e onto stack:  - ldiage <num>
/ldiage 2.71828 def

% arc directions
/clockwise     false def
/anticlockwise true  def

% test equality between two angles:  <angle> <angle> ldiagangleeq <bool>
/ldiagangleeq { ldiagfixangle exch ldiagfixangle eq } def

% test inequality between two angles:  <angle> <angle> ldiaganglene <bool>
/ldiaganglene { ldiagangleeq not } def

% maximum of two numbers:  <num> <num> ldiagmax <num>
/ldiagmax { 2 copy gt { pop } { exch pop } ifelse } def

% minimum of two numbers:  <num> <num> ldiagmin <num>
/ldiagmin { 2 copy lt { pop } { exch pop } ifelse } def

% add two points:  <point> <point> ldiagpadd <point>
/ldiagpadd
{
  % (Entering padd) 4 ldiagdebugprint
  exch 3 1 roll add 3 1 roll add exch
  % (Leaving padd) 2 ldiagdebugprint
} def

% subtract first point from second:  <point> <point> ldiagpsub <point>
/ldiagpsub { 3 2 roll sub 3 1 roll exch sub exch } def

% max two points:  <point> <point> ldiagpmax <point>
/ldiagpmax { exch 3 1 roll ldiagmax 3 1 roll ldiagmax exch } def

% min two points:  <point> <point> ldiagpmin <point>
/ldiagpmin { exch 3 1 roll ldiagmin 3 1 roll ldiagmin exch } def

% scalar multiplication: <point> <num> ldiagpmul <point>
/ldiagpmul { dup 3 1 roll mul 3 1 roll mul exch } def

% point at angle and distance:  <point> <length> <angle> ldiagatangle <point>
/ldiagatangle { 2 copy cos mul 3 1 roll sin mul ldiagpadd } def

% angle from one point to another:  <point> <point> ldiagangleto <angle>
/ldiagangleto { ldiagpsub 2 copy 0 eq exch 0 eq and {pop} {exch atan} ifelse } def

% distance between two points:  <point> <point> ldiagdistance <length>
/ldiagdistance { ldiagpsub dup mul exch dup mul add sqrt } def

% stroke a noline line:  <length> <dashlength> ldiagnoline -
/ldiagnoline
{ pop pop
} def

% stroke a solid line:  <length> <dashlength> ldiagsolid -
/ldiagsolid
{  pop pop [] 0 setdash 1 setlinecap stroke
} def

% stroke a dashed line:   <length> <dashlength> ldiagdashed -
/ldiagdashed
{  2 copy div 2 le 1 index 0 le or
   {  exch pop 1 pt ldiagmax [ exch dup ] 0 setdash }
   {  dup [ exch 4 2 roll 2 copy div
      1 sub 2 div ceiling dup 4 1 roll
      1 add mul sub exch div ] 0 setdash
   } ifelse 0 setlinecap stroke
} def

% stroke a cdashed line:  <length> <dashlength> ldiagcdashed -
/ldiagcdashed
{  % (Entering ldiagcdashed) 2 ldiagdebugprint
   2 copy le 1 index 0 le or
   { exch pop 1 pt ldiagmax [ exch dup ] dup 0 get 2 div setdash }
   { dup [ 4 2 roll exch 2 copy exch div
     2 div ceiling div 1 index sub
     ] exch 2 div setdash
   } ifelse 0 setlinecap stroke
   % (Leaving ldiagcdashed) 0 ldiagdebugprint
} def

% stroke a dotted line:  <length> <dashlength> ldiagdotted -
/ldiagdotted
{  2 copy le 1 index 0 le or
   { exch pop 1 pt ldiagmax [ exch 0 exch ] 0 setdash }
   { 1 index exch div ceiling div
     [ 0 3 2 roll ] 0 setdash
   } ifelse 1 setlinecap stroke
} def

% scale array elements by factor:  <array> <factor> ldiagscalearray <array>
/ldiagscalearray
{
  [ exch 3 2 roll
  { exch dup 3 1 roll mul exch } forall
  pop ]
} def

% sum array elements:  <array> ldiagsumarray <number>
/ldiagsumarray
{
  0 exch { add } forall
} def

% begin a more complex line: <length> <dashlength> ldiaglinebegin -
/ldiaglinebegin
{
  % (Entering ldiaglinebegin) 2 ldiagdebugprint
  20 dict begin
  /dashlen exch 1 pt ldiagmax def
  /len exch def
  /gap dashlen def
  /halfgap dashlen 2 div def
  /dash dashlen def
  /halfdash dashlen 2 div def
  /dot 0 def
  % (Leaving ldiaglinebegin) 0 ldiagdebugprint
} def

% end a more complex line: <linecap> <cycle> <startpos> <stoppos> ldiaglineend -
/ldiaglineend
{
  % (Entering ldiaglineend) 3 ldiagdebugprint
  /stoppos exch def
  /startpos exch def
  /cycle exch def
  /linecap exch def
  /stopposlen stoppos ldiagsumarray def
  /startposlen startpos ldiagsumarray def
  /cyclelen cycle ldiagsumarray def
  /effectivelen len startposlen add stopposlen sub def
  effectivelen 0 gt cyclelen 0 gt and
  {
    /repeats effectivelen cyclelen div ceiling def
    /factor len repeats cyclelen mul startposlen sub stopposlen add div def
    cycle factor ldiagscalearray startposlen factor mul setdash
    linecap setlinecap stroke
  } if
  end
  % (Leaving ldiaglineend) 0 ldiagdebugprint
} def

% stroke a dotdashed line: <length> <dashlength> ldiagdotdashed -
/ldiagdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotcdashed line: <length> <dashlength> ldiagdotcdashed -
/ldiagdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% stroke a dotdotdashed line: <length> <dashlength> ldiagdotdotdashed -
/ldiagdotdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotdotcdashed line: <length> <dashlength> ldiagdotdotcdashed -
/ldiagdotdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% stroke a dotdotdotdashed line: <length> <dashlength> ldiagdotdotdotdashed -
/ldiagdotdotdotdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap dot gap] [] [dash]
  ldiaglineend
} def

% stroke a dotdotdotcdashed line: <length> <dashlength> ldiagdotdotdotcdashed -
/ldiagdotdotdotcdashed
{
  ldiaglinebegin
  1 [dash gap dot gap dot gap dot gap] [halfdash] [halfdash]
  ldiaglineend
} def

% shape and labels of the @Box symbol
% ldiagbox <shape>
/ldiagbox
{
   0     0         /SW  ldiagpointdef
   xsize 0         /SE  ldiagpointdef
   xsize ysize     /NE  ldiagpointdef
   0     ysize     /NW  ldiagpointdef

   xsize 0.25 mul ysize /NNW ldiagpointdef
   xsize 0.75 mul ysize /NNE ldiagpointdef
   xsize 0.25 mul     0 /SSW ldiagpointdef
   xsize 0.75 mul     0 /SSE ldiagpointdef

   SE 0.5 ldiagpmul /S   ldiagpointdef
   NW 0.5 ldiagpmul /W   ldiagpointdef
   W SE ldiagpadd   /E   ldiagpointdef
   S NW ldiagpadd   /N   ldiagpointdef

   NE 0.5 ldiagpmul /CTR ldiagpointdef

     0 dg /SSW@ANGLE  ldiagangledef
     0 dg /S@ANGLE    ldiagangledef
     0 dg /SSE@ANGLE  ldiagangledef
    45 dg /SE@ANGLE   ldiagangledef
    90 dg /E@ANGLE    ldiagangledef
   135 dg /NE@ANGLE   ldiagangledef
   180 dg /NNE@ANGLE  ldiagangledef
   180 dg /N@ANGLE    ldiagangledef
   180 dg /NNW@ANGLE  ldiagangledef
   225 dg /NW@ANGLE   ldiagangledef
   270 dg /W@ANGLE    ldiagangledef
   315 dg /SW@ANGLE   ldiagangledef

   [ CTR NE ldiagpsub /ldiagboxcircum cvx ] ldiagcircumdef
   SW SE NE NW SW
} def

% shape and labels of the @CurveBox symbol
% <margin> ldiagcurvebox <shape>
/ldiagcurvebox
{  

   % (Entering ldiagcurvebox) 1 ldiagdebugprint
   ldiagdecodelength /cbmgn exch def

   xsize 0.5 mul	ysize 0.5 mul	/CTR ldiagpointdef
   xsize 0.5 mul	0		/S   ldiagpointdef
   xsize		ysize 0.5 mul	/E   ldiagpointdef
   xsize 0.5 mul	ysize		/N   ldiagpointdef
   0			ysize 0.5 mul	/W   ldiagpointdef

   cbmgn 0.293 mul		cbmgn 0.293 mul		  /SW  ldiagpointdef
   xsize cbmgn 0.293 mul sub	cbmgn 0.293 mul		  /SE  ldiagpointdef
   xsize cbmgn 0.293 mul sub	ysize cbmgn 0.293 mul sub /NE  ldiagpointdef
   cbmgn 0.293 mul		ysize cbmgn 0.293 mul sub /NW  ldiagpointdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   [ xsize ysize 0.5 ldiagpmul cbmgn /ldiagcurveboxcircum cvx ] ldiagcircumdef

   cbmgn		0
   xsize cbmgn sub	0
   [ xsize cbmgn sub	cbmgn		]
   xsize		cbmgn
   xsize		ysize cbmgn sub
   [ xsize cbmgn sub	ysize cbmgn sub	]
   xsize cbmgn sub	ysize
   cbmgn		ysize
   [ cbmgn		ysize cbmgn sub	]
   0			ysize cbmgn sub
   0			cbmgn
   [ cbmgn		cbmgn		]
   cbmgn		0

   % (Leaving ldiagcurvebox) 0 ldiagdebugprint
} def

% shadow of the @ShadowBox symbol
% its shape and labels are done, somewhat inaccurately, with ldiagbox
% <shadowmargin> ldiagshadow -
/ldiagshadow
{ 
  /lfshm exch def
  
  lfshm 0 moveto
  0 lfshm neg rlineto
  xsize 0 rlineto
  0 ysize rlineto
  lfshm neg 0 rlineto
  xsize 0 lineto
  closepath fill

} def

% shape and labels of the @Square symbol
/ldiagsquare
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   CTR xsize xsize ysize ysize ldiagpmax 0.5 ldiagpmul ldiagpadd /NE ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 135 ldiagatangle ldiagpadd /NW ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 225 ldiagatangle ldiagpadd /SW ldiagpointdef
   CTR 0 0 CTR NE ldiagdistance 315 ldiagatangle ldiagpadd /SE ldiagpointdef
   SW 0.5 ldiagpmul SE 0.5 ldiagpmul ldiagpadd /S ldiagpointdef
   NW 0.5 ldiagpmul NE 0.5 ldiagpmul ldiagpadd /N ldiagpointdef
   SW 0.5 ldiagpmul NW 0.5 ldiagpmul ldiagpadd /W ldiagpointdef
   SE 0.5 ldiagpmul NE 0.5 ldiagpmul ldiagpadd /E ldiagpointdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   [ CTR NE ldiagpsub /ldiagboxcircum cvx ] ldiagcircumdef
   SW SE NE NW SW
} def

% shape and labels of the @Diamond symbol
/ldiagdiamond
{
   xsize 0 0.5 ldiagpmul /S   ldiagpointdef
   0 ysize 0.5 ldiagpmul /W   ldiagpointdef
   S W         ldiagpadd /CTR ldiagpointdef
   CTR W       ldiagpadd /N   ldiagpointdef
   CTR S       ldiagpadd /E   ldiagpointdef
   E N ldiagpadd 0.5 ldiagpmul /NE ldiagpointdef
   N W ldiagpadd 0.5 ldiagpmul /NW ldiagpointdef
   S W ldiagpadd 0.5 ldiagpmul /SW ldiagpointdef
   S E ldiagpadd 0.5 ldiagpmul /SE ldiagpointdef

     0 dg        /S@ANGLE  ldiagangledef
    90 dg        /E@ANGLE  ldiagangledef
   180 dg        /N@ANGLE  ldiagangledef
   270 dg        /W@ANGLE  ldiagangledef
   S E ldiagangleto /SE@ANGLE ldiagangledef
   E N ldiagangleto /NE@ANGLE ldiagangledef
   N W ldiagangleto /NW@ANGLE ldiagangledef
   W S ldiagangleto /SW@ANGLE ldiagangledef

   [ xsize ysize 0.5 ldiagpmul /ldiagdiamondcircum cvx ] ldiagcircumdef
   S E N W S
} def

% shape and labels of the @Ellipse symbol
/ldiagellipse
{
   xsize 0 0.5 ldiagpmul /S   ldiagpointdef
   0 ysize 0.5 ldiagpmul /W   ldiagpointdef
   S W         ldiagpadd /CTR ldiagpointdef
   CTR W       ldiagpadd /N   ldiagpointdef
   CTR S       ldiagpadd /E   ldiagpointdef
   CTR xsize 0 0.3536 ldiagpmul ldiagpadd 0 ysize 0.3536 ldiagpmul ldiagpadd /NE ldiagpointdef
   0 ysize 0.3536 ldiagpmul CTR xsize 0 0.3536 ldiagpmul ldiagpadd ldiagpsub /SE ldiagpointdef
   xsize 0 0.3536 ldiagpmul CTR ldiagpsub 0 ysize 0.3536 ldiagpmul ldiagpadd /NW ldiagpointdef
   0 ysize 0.3536 ldiagpmul xsize 0 0.3536 ldiagpmul CTR ldiagpsub ldiagpsub /SW ldiagpointdef
   [ xsize ysize 0.5 ldiagpmul /ldiagellipsecircum cvx ] ldiagcircumdef

     0 dg /S@ANGLE  ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   270 dg /W@ANGLE  ldiagangledef

   S E ldiagangleto /SE@ANGLE ldiagangledef
   E N ldiagangleto /NE@ANGLE ldiagangledef
   N W ldiagangleto /NW@ANGLE ldiagangledef
   W S ldiagangleto /SW@ANGLE ldiagangledef

   S [ CTR ] E [ CTR ] N [ CTR ] W [ CTR ] S
} def

% shape and labels of the @Circle symbol
/ldiagcircle
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   CTR xsize 0 ysize 0 ldiagpmax 0.5 ldiagpmul ldiagpadd /E ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 45 ldiagatangle ldiagpadd /NE ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 90 ldiagatangle ldiagpadd /N ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 135 ldiagatangle ldiagpadd /NW ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 180 ldiagatangle ldiagpadd /W ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 225 ldiagatangle ldiagpadd /SW ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 270 ldiagatangle ldiagpadd /S ldiagpointdef
   CTR 0 0 CTR E ldiagdistance 315 ldiagatangle ldiagpadd /SE ldiagpointdef
   [ S E ldiagpsub /ldiagellipsecircum cvx ] ldiagcircumdef

     0 dg /S@ANGLE  ldiagangledef
    45 dg /SE@ANGLE ldiagangledef
    90 dg /E@ANGLE  ldiagangledef
   135 dg /NE@ANGLE ldiagangledef
   180 dg /N@ANGLE  ldiagangledef
   225 dg /NW@ANGLE ldiagangledef
   270 dg /W@ANGLE  ldiagangledef
   315 dg /SW@ANGLE ldiagangledef

   S [ CTR ] E [ CTR ] N [ CTR ] W [ CTR ] S
} def

% shape and labels of the @VLine and @VArrow symbols
/ldiagvline
{
   xmark ysize ldiagprevious /FROM ldiagpointdef
   xmark 0 ldiagprevious /TO ldiagpointdef
} def

% points of a polygon around base with given no of sides, vert init angle:
% <sides> <angle> ldiagpolygon <point> ... <point>
/ldiagpolygon
{  exch round cvi exch
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   90 sub CTR 2 copy ldiagmax 5 3 roll
   [ 4 copy pop /ldiagpolycircum cvx ] ldiagcircumdef
   exch dup 360 exch div exch
   1 1  3 2 roll
   {  4 string cvs (P) exch ldiagconcat
      3 copy exch pop (@ANGLE) ldiagconcat cvn exch 90 add exch ldiagangledef
      cvn 6 copy pop pop ldiagatangle 2 copy 10 2 roll
      3 2 roll ldiagpointdef
      dup 3 1 roll add exch
   }  for
   pop ldiagatangle
} def

% shape and labels of the @Isosceles triangle symbol
/ldiagisosceles
{
   xsize ysize 0.5 ldiagpmul /CTR ldiagpointdef
   0     0                   /SW  ldiagpointdef
   xsize 0                   /SE  ldiagpointdef
   xsize 0.5 mul ysize       /N   ldiagpointdef
   xsize 0.5 mul 0           /S   ldiagpointdef
   SE 0.5 ldiagpmul N 0.5 ldiagpmul ldiagpadd /NE ldiagpointdef
   SW 0.5 ldiagpmul N 0.5 ldiagpmul ldiagpadd /NW ldiagpointdef

   [ xsize ysize /ldiagisoscelescircum cvx ] ldiagcircumdef

     0 dg              /SW@ANGLE ldiagangledef
     0 dg              /SE@ANGLE ldiagangledef
   180 dg              /N@ANGLE  ldiagangledef
     0 dg              /S@ANGLE  ldiagangledef
     SE N ldiagangleto /NE@ANGLE ldiagangledef
     N SW ldiagangleto /NW@ANGLE ldiagangledef

   SW SE N SW
} def

% next array element:  <array> <index> ldiaggetnext <array> <index> <any> true
%                                               or <array> <index> false
/ldiaggetnext
{  2 copy exch length ge
   { false }
   { 2 copy get exch 1 add exch true } ifelse
} def

% check whether thing is number:  <any> ldiagisnumbertype <any> <bool>
/ldiagisnumbertype
{  dup type dup
   /integertype eq exch /realtype eq or
} def

% check whether thing is an array:  <any> ldiagisarraytype <any> <bool>
/ldiagisarraytype { dup type /arraytype eq } def

% check whether thing is an array:  <any> ldiagisnametype <any> <bool>
/ldiagisnametype { dup type /nametype eq } def

% get next item:  <array> <index> ldiaggetnextitem <array> <index> 0
%                                              or <array> <index> <array> 1
%                                              or <array> <index> <point> 2
/ldiaggetnextitem
{   ldiaggetnext
    {	ldiagisarraytype
	{   1
	}
	{   ldiagisnumbertype
	    {	3 1 roll
		ldiaggetnext
		{   ldiagisnumbertype
		    {	4 3 roll exch  2
		    }
		    {	pop 3 2 roll pop  0
		    } ifelse
		}
		{   3 2 roll pop  0
		} ifelse
	    }
	    {	pop 0
	    } ifelse
	} ifelse
    }
    {	0
    } ifelse
} def

% approximate equality: num1 num2  approxeq  <boolean>
/approxeq
{ dup 0 eq
  { pop 0 eq
  }
  { dup 3 1 roll sub exch div abs 0.001 lt
  } ifelse
} def

% set arc path:  bool x1 y1  x2 y2  x0 y0  ldiagsetarc  <angle> <angle> <dist>
% the path goes from x1 y1 to x2 y2 about centre x0 y0,
% anticlockwise if bool is true else clockwise.
% The orientations of backwards pointing and forwards pointing
% arrowheads are returned in the two angles, and
% the length of the arc is returned in <dist>.
/ldiagsetarc
{
  % (Entering ldiagsetarc) 7 ldiagdebugprint
  20 dict begin
     matrix currentmatrix 8 1 roll
     2 copy translate 2 copy 8 2 roll
     4 2 roll ldiagpsub 6 2 roll ldiagpsub
     dup /y1 exch def dup mul /y1s exch def
     dup /x1 exch def dup mul /x1s exch def
     dup /y2 exch def dup mul /y2s exch def
     dup /x2 exch def dup mul /x2s exch def
     /dist1 0 0 x1 y1 ldiagdistance def
     /dist2 0 0 x2 y2 ldiagdistance def

     y1s y2s approxeq
     {	-1
     }
     {	y1s x2s mul y2s x1s mul sub y1s y2s sub div
     } ifelse
     /da exch def

     x1s x2s approxeq
     {	-1
     }
     {	x1s y2s mul x2s y1s mul sub x1s x2s sub div
     } ifelse
     /db exch def

     da 0 gt db 0 gt and
     {
	% (  case 1, ellipse) 0 ldiagdebugprint
	/LMax da sqrt db sqrt ldiagmax def
	/scalex da sqrt LMax div def
	/scaley db sqrt LMax div def
	scalex scaley scale
	0 0 LMax
	0 0 x1 scalex mul y1 scaley mul ldiagangleto
	0 0 x2 scalex mul y2 scaley mul ldiagangleto
	2 copy eq { 360 add } if
	2 copy 8 2 roll
	5 index { arc } { arcn } ifelse
	2 index 1 index
	{ 90 sub } { 90 add } ifelse
	dup sin scaley mul exch cos scalex mul atan
	2 index 2 index
	{ 90 add } { 90 sub } ifelse
	dup sin scaley mul exch cos scalex mul atan
	5 2 roll  % res1 res2 ang1 ang2 anticlockwise
	{ exch sub } { sub } ifelse
	dup 0 le { 360 add } if  ldiagpi mul LMax mul 180 div
     }
     {
	dist1 dist2 approxeq
	% x1 y1 dist1 (  x1 y1, d) 3 ldiagdebugprint pop pop pop
	% x2 y2 dist2 (  x2 y2, d) 3 ldiagdebugprint pop pop pop
	{
		% (  case 2, circle) 0 ldiagdebugprint
		0 0
		dist1
		0 0 x1 y1 ldiagangleto
		0 0 x2 y2 ldiagangleto
		2 copy eq { 360 add } if
		2 copy 8 2 roll
		5 index { arc } { arcn } ifelse
		2 index 1 index
		{ 90 sub } { 90 add } ifelse
		2 index 2 index
		{ 90 add } { 90 sub } ifelse
		5 2 roll % res1 res2 ang1 ang2 clockwise
		{ exch sub } { sub } ifelse
		dup 0 le { 360 add } if
		ldiagpi mul dist1 mul 180 div
	}
	{
		% (  case 3, line) 0 ldiagdebugprint
		x2 y2 lineto pop
		x2 y2 x1 y1 ldiagangleto
		x1 y1 x2 y2 ldiagangleto
		x1 y1 x2 y2 ldiagdistance
	} ifelse
     } ifelse
     4 -1 roll setmatrix
     end
  % (Leaving ldiagsetarc) 3 ldiagdebugprint
} def

% ldiagsetcurve: set up a Bezier curve from x0 y0 to x3 y3
% and return arrowhead angles and length of curve (actually 0)
% x0 y0 x1 y1 x2 y2 x3 y3 ldiagsetcurve <angle> <angle> <length>
/ldiagsetcurve
{ 8 copy curveto pop pop
  ldiagangleto
  5 1 roll
  4 2 roll ldiagangleto
  exch
  0
} def

% ldiagsetpath: convert a Diag path into a PostScript path
% [ shape ] ldiagsetpath -
/ldiagsetpath
{
  10 dict begin
    0 newpath
    /prevseen false def
    /curveseen false def
    { ldiaggetnextitem
      dup 0 eq { pop exit }
      { 1 eq
        { /curveseen true def
	  /curve exch def
	  curve length 0 eq { /curveseen false def } if
        }
        { /ycurr exch def
	  /xcurr exch def
	  prevseen
	  { curveseen
	    { curve length 4 eq
	      { xprev yprev
		curve 0 get curve 1 get
		curve 2 get curve 3 get
		xcurr ycurr
		ldiagsetcurve pop pop pop
	      }
	      { xprev yprev xcurr ycurr
	        curve length 1 ge { curve 0 get } { 0 } ifelse
	        curve length 2 ge { curve 1 get } { 0 } ifelse
	        curve length 3 ge { curve 2 get } { true } ifelse
	        7 1 roll
	        ldiagsetarc pop pop pop
	      } ifelse
	    }
	    { xcurr ycurr lineto
	    } ifelse
	  }
	  { xcurr ycurr moveto
	  } ifelse
	  /xprev xcurr def
	  /yprev ycurr def
	  /prevseen true def
	  /curveseen false def
        } ifelse
      } ifelse
    } loop pop pop
  end
} def

% ldiagpaintpath: paint a path of the given shape
% /paint [ shape ] ldiagpaintpath -
/ldiagpaintpath
{
  ldiagsetpath cvx exec
} def

% stroke a path of the given shape in the given linestyle and dash length.
% Return the origin and angle of the backward and forward arrow heads.
% dashlength /linestyle [shape] ldiagdopath  [<point> <angle>] [<point> <angle>] 
/ldiagdopath
{
  10 dict begin
    0
    /prevseen  false def
    /curveseen false def
    /backarrow []    def
    /fwdarrow  []    def
    {
	ldiaggetnextitem
	dup 0 eq { pop exit }
	{
	    1 eq
	    {	/curveseen true def
		/curve exch def
		curve length 0 eq { /prevseen false def } if
	    }
	    {	/ycurr exch def
		/xcurr exch def
		prevseen
		{   newpath xprev yprev moveto
		    curveseen
		    {	curve length 4 eq
			{   xprev yprev
			    curve 0 get curve 1 get
			    curve 2 get curve 3 get
			    xcurr ycurr ldiagsetcurve
			}
			{   xprev yprev xcurr ycurr
			    curve length 1 ge { curve 0 get } { 0 } ifelse
			    curve length 2 ge { curve 1 get } { 0 } ifelse
			    curve length 3 ge { curve 2 get } { true } ifelse
			    7 1 roll
			    ldiagsetarc
			} ifelse
		    }
		    {	xcurr ycurr lineto
			xcurr ycurr xprev yprev ldiagangleto dup 180 sub
			xprev yprev xcurr ycurr ldiagdistance
		    } ifelse
		    6 index 6 index cvx exec
		    [ xprev yprev 5 -1 roll ]
		    backarrow length 0 eq
		    { /backarrow exch def }
		    { pop } ifelse
		    [ xcurr ycurr 4 -1 roll ] /fwdarrow exch def
		} if
		/xprev xcurr def
		/yprev ycurr def
		/prevseen true def
		/curveseen false def
	    } ifelse
	} ifelse
    } loop
    pop pop pop pop
    backarrow length 0 eq { [ 0 0 0 ] } { backarrow } ifelse
    fwdarrow  length 0 eq { [ 0 0 0 ] } { fwdarrow  } ifelse
  end
} def


% stroke a path of the given shape in the given linestyle and dash length.
% dashlength [ /linestyle ] [shape] ldiagdosegpath  -
/ldiagdosegpath
{
  12 dict begin
    1 index /seg exch def
    1 index length /seglength exch def
    0 /segcount exch def
    0
    /prevseen  false def
    /curveseen false def
    /backarrow []    def
    /fwdarrow  []    def
    {
	ldiaggetnextitem
	dup 0 eq { pop exit }
	{
	    1 eq
	    {	/curveseen true def
		/curve exch def
		curve length 0 eq { /prevseen false def } if
	    }
	    {	/ycurr exch def
		/xcurr exch def
		prevseen
		{   newpath xprev yprev moveto
		    curveseen
		    {	curve length 4 eq
			{   xprev yprev
			    curve 0 get curve 1 get
			    curve 2 get curve 3 get
			    xcurr ycurr ldiagsetcurve
			}
			{   xprev yprev xcurr ycurr
			    curve length 1 ge { curve 0 get } { 0 } ifelse
			    curve length 2 ge { curve 1 get } { 0 } ifelse
			    curve length 3 ge { curve 2 get } { true } ifelse
			    7 1 roll
			    ldiagsetarc
			} ifelse
		    }
		    {	xcurr ycurr lineto
			xcurr ycurr xprev yprev ldiagangleto dup 180 sub
			xprev yprev xcurr ycurr ldiagdistance
		    } ifelse
		    6 index seg segcount seglength mod get cvx exec
		    /segcount segcount 1 add def
		    [ xprev yprev 5 -1 roll ]
		    backarrow length 0 eq
		    { /backarrow exch def }
		    { pop } ifelse
		    [ xcurr ycurr 4 -1 roll ] /fwdarrow exch def
		} if
		/xprev xcurr def
		/yprev ycurr def
		/prevseen true def
		/curveseen false def
	    } ifelse
	} ifelse
    } loop
    pop pop pop pop
  end
} def

% ldiagnodebegin: start of node parameters
% ldiagnodebegin -
/ldiagnodebegin
{ % (Entering ldiagnodebegin) 0 ldiagdebugprint
  ldiagmaxlabels dict begin 
} def

% ldiagnodeend: end of node parameters (so do the node)
% <outline> <dashlength> <style> <linewidth> <colour> <paint> ldiagnodeend -
/ldiagnodeend
{
  % (Entering ldiagnodeend) 0 ldiagdebugprint
  end % matches begin in ldiagnodebegin
  5 index gsave ldiagpaintpath grestore         % <outline> <dl> <st> <lw> <cl>
  4 index ldiagsetpath clip newpath             % <outline> <dl> <st> <lw> <cl>
  exec						% <outline> <dl> <st> <lw>
  2 mul setlinewidth                            % <outline> <dl> <st>
  3 -1 roll                                     % <dashlength> <st> <outline>
  ldiagdosegpath                                % -
  % (Leaving ldiagnodeend) 0 ldiagdebugprint
} def

% ldiaglinkbegin: start of link parameters
% <direct> ldiaglinkbegin -
/ldiaglinkbegin
{ ldiagmaxlabels dict begin 
  1 eq /direct exch def
} def

% ldiaglinkend: end of link parameters (so do the link)
% <outline> <dashlength> <style> <linewidth> ldiaglinkend -
/ldiaglinkend
{
  end % matches begin in ldiaglinkbegin
  setlinewidth
  3 -1 roll ldiagdosegpath
} def

% ldiagdoarrow: draw an arrow head of given form
% dashlength /lstyle /pstyle hfrac height width [ <point> <angle> ] ldiagdoarrow -
/ldiagdoarrow
{  matrix currentmatrix 8 1 roll
   dup 0 get 1 index 1 get translate
   2 get rotate
   [ 2 index neg 2 index 0 0
     3 index 3 index neg
     1 index 10 index mul 0
     7 index 7 index ]
   4 1 roll pop pop pop
   dup 3 1 roll
   gsave ldiagpaintpath grestore ldiagdopath pop pop
   setmatrix
} def

% arrow head styles (unused)
% /ldiagopen     0.0 def
% /ldiaghalfopen 0.5 def
% /ldiagclosed   1.0 def

% stroke no arrows, forward, back, and both
/ldiagnoarrow { pop pop pop pop pop pop pop pop                        } def
/ldiagforward { 7 -1 roll ldiagdoarrow pop                              } def
/ldiagback    { 8 -2 roll pop ldiagdoarrow                              } def
/ldiagboth    { 8 -1 roll 7 copy ldiagdoarrow pop 7 -1 roll ldiagdoarrow } def

% ldiagprevious: return previous point on path
/ldiagprevious
{ ldiagisnumbertype
  { 2 copy }
  { ldiagisarraytype
    { 2 index 2 index }
    { 0 0 }
    ifelse
  } ifelse
} def

% Tag dictionary operators
%
% Diag's tag dictionaries are kept on the same stack as other dictionaries,
% since there is nowhere else to put them.  However, they are managed like
% a separate stack using the following operators:
%
%  <tag>  ldiagpushtagdict  -      Push a new, empty tag dictionary
%         ldiagtoptagdict   dict   Find the top tag dictionary
%         ldiagpoptagdict   -      Pop and destroy the top tag dictionary
%         ldiagpopuptagdict -      Pop top tag dict and promote its entries
% <array> ldiagpopsometagdict -    Like popuptagdict but only those promote
%                                  those labels listed in <array>
%         ldiagdebugtagdict -      Debug print of dictionary stack
%
% They are distinguished from other dictionaries by containing /ldiagtagdict,
% whose value is the <tag> which is used by ldiagpopuptagdict,
% and they are hopefully never the target of any non-tag definition because
% they are never the top dictionary, since push places the new dict second.

/ldiagpushtagdict
{ ldiagmaxlabels dict dup
  currentdict end exch begin begin
  exch /ldiagtagdict exch put
} def

/ldiagtoptagdict
{ /ldiagtagdict where not
  { (Diag internal error: no tag dictionary) show stop
  } if
} def

/ldiagpoptagdict
{
  % (Entering poptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
  mark
  { currentdict end
    dup /ldiagtagdict known
    { exit
    } if
  } loop
  pop
  counttomark
  { begin
  } repeat
  pop
  % (Leaving poptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% promote labels from top tag dictionary to second top tag dictionary
% each prefixed by <string>@ if <string> (value of /ldiagtagdict) is not empty
% - ldiagpopuptagdict -
/ldiagpopuptagdict
{
  ldiagtagdict
  % (Entering ldiagpopuptagdict) 1 ldiagdebugprint
  % ldiagdebugtagdict
  ldiagtoptagdict ldiagpoptagdict ldiagtoptagdict exch
  { exch dup length string cvs
    3 index exch ldiagmconcat
    cvn exch 2 index 3 1 roll put
  } forall
  pop pop
  % (Leaving ldiagpopuptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% similar to ldiagpopuptagdict but only those inner labels that are
% present in <array> will be promoted
% <array> ldiagpopsometagdict -
/ldiagpopsometagdict
{
  ldiagtagdict
  % (Entering ldiagpopsometagdict) 1 ldiagdebugprint
  % ldiagdebugtagdict
  ldiagtoptagdict
  ldiagpoptagdict
  ldiagtoptagdict
  4 -1 roll
  { dup 3 index exch
    get
    exch 4 index
    exch ldiagmconcat exch
    3 copy put
    pop pop
  } forall
  pop pop pop
  % (Leaving ldiagpopuptagdict) 0 ldiagdebugprint
  % ldiagdebugtagdict
} def

% debug tag dictionary stack
/ldiagdebugtagdict
{ (Entering ldiagdebugtagdict) 0 ldiagdebugprint
  30 array dictstack
  { dup /ldiagtagdict known
    { dup /ldiagtagdict get 0 ldiagdebugprint
      { pop 100 string cvs (   ) exch ldiagconcat
	dup 0 ldiagdebugprint
	pop
      }
      forall
    }
    { pop (other) 0 ldiagdebugprint
    } ifelse
  } forall
  (Leaving ldiagdebugtagdict) 0 ldiagdebugprint
} def

% label a point in top tag dictionary:  <point> /name ldiagpointdef -
/ldiagpointdef
{
  % (Entering ldiagpointdef) 3 ldiagdebugprint
  [ 4 2 roll transform /itransform cvx ] cvx
  ldiagtoptagdict 3 1 roll put
  % (Leaving ldiagpointdef) 0 ldiagdebugprint
} def

% label an angle in top tag dictionary:  <angle> /name ldiagangledef -
/ldiagangledef
{
  % (Entering ldiagangledef) 2 ldiagdebugprint
  exch ldiagfixangle ldiagtoptagdict 3 1 roll put
  % (Leaving ldiagangledef) 0 ldiagdebugprint
} def

% add CIRCUM operator with this body:  <array> ldiagcircumdef -
/ldiagcircumdef
{   % (Entering ldiagcircumdef) 1 ldiagdebugprint
    /CIRCUM exch cvx
    ldiagtoptagdict 3 1 roll put
    % currentdict end
    % 3 1 roll
    % def
    % begin
    % (Leaving ldiagcircumdef) 0 ldiagdebugprint
} def

% show points (except CIRCUM and ANGLE): - ldiagshowpoints -
/ldiagshowpoints
{
  % (Entering ldiagshowpoints) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (CIRCUM) search % if CIRCUM in key
      { pop pop pop pop pop }
      { 
        (ANGLE) search % if ANGLE in key
        {
          pop pop pop pop pop
        }
        {
          (ldiagtagdict) search
          {
            pop pop pop pop pop
          }
          {
	    pop cvx exec
	    newpath 2.0 pt 0 360 arc 0 setgray fill pop
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowpoints) 0 ldiagdebugprint
} def


/ldiagshowtags
{
  % (Entering ldiagshowtags) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    % dup 0 ldiagdebugprint
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (CIRCUM) search % if CIRCUM in key
      { pop pop pop pop pop }
      { 
        (ANGLE) search % if ANGLE in key
        {
          pop pop pop pop pop
        }
        {
          (ldiagtagdict) search
          {
            pop pop pop pop pop
          }
          {
	    pop cvx exec 2 copy
	    gsave
	    newpath 2.0 pt 0 360 arc 0 setgray fill
            /Times-Roman findfont 8 pt scalefont setfont
            translate 40 rotate 0.2 cm 0.1 cm moveto 100 string cvs show
	    grestore
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowtags) 0 ldiagdebugprint
} def


% show angles: - ldiagshowangles -
/ldiagshowangles
{
  % (Entering ldiagshowangles) 0 ldiagdebugprint
  ldiagtoptagdict
  { 1 index 100 string cvs
    % dup 0 ldiagdebugprint
    (ldiagdebugpos) search
    { pop pop pop pop pop }
    {
      (ldiagtagdict) search
      {
        pop pop pop pop pop
      }
      {
        (CIRCUM) search % if CIRCUM in key
        { pop pop pop pop pop }
        { 
          (@ANGLE) search % if ANGLE in key, draw the angle at the point
          {
            % (showing ANGLE) 5 ldiagdebugprint
            gsave exch pop exch pop cvx
            % (about to execute) 1 ldiagdebugprint
            exec translate rotate 0.8 0.8 scale pop
            newpath 0 0 2.0 pt 0 360 arc 0 setgray fill
            newpath 4 pt 0 moveto 9 pt 0 lineto
            9 pt 1.5 pt lineto 11 pt 0 lineto 9 pt -1.5 pt lineto
            9 pt 0 lineto [] 0 setdash 4 pt setlinewidth 0 setlinejoin
	    stroke grestore
            % (finished ANGLE) 5 ldiagdebugprint
          }
          {
            % else must be a point, we aren't showing those
            pop pop pop
          } ifelse
        } ifelse
      } ifelse
    } ifelse
  } forall
  % (Leaving ldiagshowangles) 0 ldiagdebugprint
} def

% fix an angle to 0 <= res < 360:  <angle> ldiagfixangle <angle>
/ldiagfixangle
{
  % (Entering ldiagfixangle) 1 ldiagdebugprint
  { dup 0 ge { exit } if
    360 add
  } loop
  { dup 360 lt { exit } if
    360 sub
  } loop
  % (Leaving ldiagfixangle) 1 ldiagdebugprint
} def

% find point on circumference of box:  alpha a b ldiagboxcircum x y
/ldiagboxcircum
{
  % (Entering ldiagboxcircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    0 0 a b ldiagangleto /theta exch def

    % if alpha <= theta, return (a, a*tan(alpha))
    alpha theta le
    { a  a alpha sin mul alpha cos div }
    {
      % else if alpha <= 180 - theta, return (b*cot(alpha), b)
      alpha 180 theta sub le
      { b alpha cos mul alpha sin div  b }
      {
        % else if alpha <= 180 + theta, return (-a, -a*tan(alpha))
        alpha 180 theta add le
        { a neg  a neg alpha sin mul alpha cos div }
        {
	  % else if alpha <= 360 - theta, return (-b*cot(alpha), -b)
	  alpha 360 theta sub le
          { b neg alpha cos mul alpha sin div  b neg }
	  {
	    % else 360 - theta <= alpha, return (a, a*tan(alpha))
	    a  a alpha sin mul alpha cos div
	  } ifelse
        } ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagboxcircum) 2 ldiagdebugprint
} def

% find quadratic roots (assume a != 0): a b c ldiagqroots x1 x2 2
%                                                     or    x2 1
%                                                     or       0
/ldiagqroots
{
  4 dict begin
    /c exch def
    /b exch def
    /a exch def
    /disc b b mul 4 a c mul mul sub def
    disc 0 lt
    { 0
    }
    { disc 0 eq
      { b neg 2 a mul div
	1
      }
      { b neg disc sqrt add 2 a mul div
        b neg disc sqrt sub 2 a mul div
	2
      }
      ifelse
    }
    ifelse
  end
} def

% work our which quadrant: <angle> ldiagquadrant <0-3>
/ldiagquadrant
{ dup 90 lt
  { pop 0
  }
  { dup 180 lt
    { pop 1
    }
    { 270 lt
      { 2
      }
      { 3
      } ifelse
    } ifelse
  } ifelse
} def

% find curvebox circum, assuming upper right quadrant: alpha a b xmk ldiagcb x y
/ldiagcb
{
  6 dict begin
    /xmk exch def
    /b exch def
    /a exch def
    /alpha exch def
    /theta1 0 0 a b xmk sub ldiagangleto def
    /theta2 0 0 a xmk sub b ldiagangleto def
    alpha theta1 le
    { % if alpha <= theta1, return (a, a*tan(alpha))
      a  a alpha sin mul alpha cos div
    }
    { alpha theta2 ge
      { % else if alpha > theta2, return (b*cot(alpha), b)
	b alpha cos mul alpha sin div  b
      }
      {
	% else, return the intersection of line and circle
	a xmk sub b xmk sub xmk  0 0 alpha ldiagcircleintersect
	dup 0 eq
	{ % should never happen, just return any reasonable point
	  pop
	  a b 0.5 ldiagpmul
	}
	{ 1 eq
	  { % should never happen, just return the point on top of stack
	  }
	  { % the usual case, two points on stack, return the larger
	    ldiagpmax
	  } ifelse
	} ifelse
      } ifelse
    } ifelse
  end
} def

% find point on circumference of curvebox: alpha a b xmk ldiagcurveboxcircum x y
/ldiagcurveboxcircum
{
  % (Entering ldiagcurveboxcircum) 4 ldiagdebugprint
  5 dict begin
    /xmk exch def
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def

    % work out which quadrant we are in, and reflect accordingly
    /quad alpha ldiagquadrant def
    quad 0 eq
    { alpha a b xmk ldiagcb
    }
    { quad 1 eq
      { 180 alpha sub a b xmk ldiagcb exch neg exch
      }
      { quad 2 eq
	{ alpha 180 sub a b xmk ldiagcb neg exch neg exch
	}
	{ 360 alpha sub a b xmk ldiagcb neg
	} ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagcurveboxcircum) 2 ldiagdebugprint
} def

% find point on circumference of diamond:  alpha a b ldiagdiamondcircum x y
/ldiagdiamondcircum
{
  % (Entering ldiagdiamondcircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    b alpha cos abs mul  a alpha sin abs mul  add  /denom exch def
    a b mul alpha cos mul denom div
    a b mul alpha sin mul denom div
  end
  % (Leaving ldiagdiamondcircum) 2 ldiagdebugprint
} def

% find point on circumference of ellipse:  alpha a b ldiagellipsecircum x y
/ldiagellipsecircum
{
  % (Entering ldiagellipsecircum) 3 ldiagdebugprint
  4 dict begin
    /b exch def
    /a exch def
    ldiagfixangle /alpha exch def
    b alpha cos mul dup mul  a alpha sin mul dup mul  add sqrt /denom exch def
    a b mul alpha cos mul denom div
    a b mul alpha sin mul denom div
  end
  % (Leaving ldiagellipsecircum) 2 ldiagdebugprint
} def

% find point on circumference of isosceles:  alpha a b ldiagisoscelescircum x y
/ldiagisoscelescircum
{
  % (Entering ldiagisoscelescircum) 3 ldiagdebugprint
  7 dict begin
    /b exch def
    /a exch def
    /alpha exch ldiagfixangle def
    /theta1 90 def
    /theta2 a b 0.5 ldiagpmul 0 0 ldiagangleto def
    /theta3 a b 0.5 ldiagpmul a 0 ldiagangleto def
    alpha theta1 ge alpha theta2 le and
    { 0 0 a 2 div b
    }
    { alpha theta2 ge alpha theta3 le and
      { 0 0 a 0
      }
      { a 0 a 2 div b
      } ifelse
    } ifelse
    a 2 div b 2 div 2 copy 1 ft alpha ldiagatangle ldiaglineintersect
    a 2 div b 2 div 4 2 roll ldiagpsub
  end
  % (Leaving ldiagisoscelescircum) 2 ldiagdebugprint
} def

% find point of intersection of two lines each defined by two points
% x1 y1 x2 y2  x3 y3 x4 y4  ldiaglineintersect x y
/ldiaglineintersect
{
  % (Entering ldiaglineintersect) 8 ldiagdebugprint
  13 dict begin
    /y4 exch def
    /x4 exch def
    /y3 exch def
    /x3 exch def
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    x2 x1 sub /x21 exch def
    x4 x3 sub /x43 exch def
    y2 y1 sub /y21 exch def
    y4 y3 sub /y43 exch def
    y21 x43 mul y43 x21 mul sub /det exch def
  
    % calculate x 
    y21 x43 mul x1 mul
    y43 x21 mul x3 mul sub
    y3 y1 sub x21 mul x43 mul add
    det div

    % calculate y
    x21 y43 mul y1 mul
    x43 y21 mul y3 mul sub
    x3 x1 sub y21 mul y43 mul add
    det neg div

  end
  % (Leaving ldiaglineintersect) 2 ldiagdebugprint
} def

% find point on circumference of polygon
% alpha radius num theta ldiagpolycircum x y
/ldiagpolycircum
{
  % (Entering ldiagpolycircum) 4 ldiagdebugprint
  13 dict begin
    /theta exch def
    /num exch def
    /radius exch def
    /alpha exch def

    % calculate delta, the angle from theta to alpha
    alpha theta sub ldiagfixangle

    % calculate the angle which is the multiple of 360/num closest to delta
    360 num div div truncate 360 num div mul theta add /anglea exch def

    % calculate the next multiple of 360/num after anglea
    anglea 360 num div add /angleb exch def

    % intersect the line through these two points with the alpha line
    anglea cos anglea sin  angleb cos angleb sin
    0 0  alpha cos 2 mul alpha sin 2 mul
    ldiaglineintersect radius ldiagpmul

  end
  % (Leaving ldiagpolycircum) 2 ldiagdebugprint
} def

% find point of intersection of a line and a circle
% x0 y0 r  x1 y1 theta  ldiagcircleintersect xa ya xb yb 2
%                                        or       xb yb 1
%                                        or             0
/ldiagcircleintersect
{
  % (Entering ldiagcircleintersect) 6 ldiagdebugprint
  15 dict begin
    /theta exch def
    /y1    exch def
    /x1    exch def
    /r     exch def
    /y0    exch def
    /x0    exch def

    % if sin(theta) = 0 then line is horizontal and y must be y1
    theta sin abs 0.00001 lt
    { 
      /a 1 def
      /b -2 x0 mul def
      /c x0 dup mul y1 y0 sub dup mul add r dup mul sub def
      a b c ldiagqroots dup
      0 eq
      { pop
	0
      }
      { 1 eq
	{ y1 1
	}
	{ y1 exch y1 2
	} ifelse
      } ifelse
    }
    {
      /ct theta cos theta sin div def
      /a ct ct mul 1 add def
      /b ct x1 x0 sub mul y1 add y0 sub 2 mul def
      /c x1 x0 sub dup mul y1 y0 sub dup mul add r dup mul sub def
      a b c ldiagqroots dup
      0 eq
      { pop
	0
      }
      { 1 eq
	{ y1 add /yb exch def
	  yb y1 sub ct mul x1 add /xb exch def
	  xb yb 1
	}
	{ y1 add /ya exch def
	  ya y1 sub ct mul x1 add /xa exch def
	  y1 add /yb exch def
	  yb y1 sub ct mul x1 add /xb exch def
	  xa ya xb yb 2
	} ifelse
      } ifelse
    } ifelse
  end
  % (Leaving ldiagcircleintersect) 1 ldiagdebugprint
} def

% find line which is the perpendicular bisector of two points, defined
% by two points
% x1 y1 x2 y2 ldiaglinebetween x3 y3 x4 y4
/ldiaglinebetween
{ % (Entering ldiaglinebetween) 4 ldiagdebugprint
  /y2 exch def /x2 exch def
  /y1 exch def /x1 exch def

  % let x3, y3 be the point halfway between the two points
  x1 y1 x2 y2 ldiagpadd 0.5 ldiagpmul
  /y3 exch def /x3 exch def

  % find a point perpendicular to x3, y3
  x3 y3 50 x1 y1 x2 y2 ldiagangleto 90 dg add ldiagatangle

  % plus x3 y3 gives the two points
  x3 y3

  % (Leaving ldiaglinebetween) 4 ldiagdebugprint
} def

% find <proc>@<string>:  <proc> <string> ldiagfindlabel <any> true
%                                                      <proc> <string> false
/ldiagfindlabel
{
  % (Entering ldiagfindlabel) 2 ldiagdebugprint
  exch dup length 1 ne
  { exch false
    % (Leaving ldiagfindabel (length not 1)) 3 ldiagdebugprint
  }
  { dup 0 get type /nametype ne
    { exch false
      % (Leaving ldiagfindabel (not a name)) 3 ldiagdebugprint
    }
    { dup 0 get dup length string cvs (@) ldiagconcat
      2 index ldiagconcat dup where
      { exch get exch pop exch pop cvx exec true
	% (Leaving ldiagfindlabel with success) 100 ldiagdebugprint
      }
      {
	pop exch false
	% (Leaving ldiagfindabel (concat not sensible)) 3 ldiagdebugprint
      } ifelse
    } ifelse
  } ifelse
} bind def

% execute <proc>@<string> or else default:  <proc> <string> ldiagdolabel <various>
/ldiagdolabel
{
  % (Entering ldiagdolabel) 2 ldiagdebugprint
  ldiagfindlabel not
  {
    dup (CIRCUM) eq
    { pop pop pop 0 0
    }
    {
      dup (ANGLE) eq
      { pop pop 0
      }
      { pop cvx exec
      } ifelse
    } ifelse
  } if
  % (Leaving ldiagdolabel) 2 ldiagdebugprint
} bind def

% execute a proc depending on whether number is negative, zero, or positive
% procneg proczero procpos number ldiagsigncase <anything>
/ldiagsigncase
{
  % (Entering ldiagsigncase) 4 ldiagdebugprint
  dup 0 lt
  { pop pop pop exec
  }
  { 0 gt
    { exch pop exch pop exec
    }
    { pop exch pop exec
    } ifelse
  } ifelse
  % (Leaving ldiagsigncase) 0 ldiagdebugprint
} bind def

% execute proci if angle is in ith quadrant
% proc45 proc270 proc180 proc90 proc0 proc315 proc225 proc135 angle ldiagquadcase <anything>
/ldiagquadcase
{
  % (Entering ldiagquadcase) 9 ldiagdebugprint
  round ldiagfixangle cvi dup 90 mod 0 eq
  { 90 idiv 4 add } { 90 idiv } ifelse
  8 exch roll pop pop pop pop pop pop pop exec
  % (Leaving ldiagquadcase) 0 ldiagdebugprint
} bind def

% decode Lout length into PostScript length
% <string> ldiagdecodelength <number>
/ldiagdecodelength
{
  % (Entering ldiagdecodelength) 1 ldiagdebugprint
  (f) search
  { exch pop exch pop cvr ft
  }
  { (c) search
    { exch pop exch pop cvr cm
    }
    { (p) search
      { exch pop exch pop cvr pt
      }
      { (m) search
	{ exch pop exch pop cvr em
	}
	{ (s) search
	  { exch pop exch pop cvr sp
	  }
	  { (v) search
	    { exch pop exch pop cvr vs
	    }
	    { (i) search
	      { exch pop exch pop cvr in
	      }
	      { pop 0
	      } ifelse
	    } ifelse
	  } ifelse
	} ifelse
      } ifelse
    } ifelse
  } ifelse
  % (Leaving ldiagdecodelength) 1 ldiagdebugprint
} def

% implement aabout function
% logical form:  <circum> <extra> <centre> aabout <point>
% actual form:   { <labelorpoint> } cvlit <length> [ <point> ] cvx aabout <point>
/ldiagaabout
{
  /centre exch def
  /extra exch def
  /circum exch def

  /ZXCTR [ centre ] cvx def
  /ZFCTR [ circum (CTR) ldiagdolabel ] cvx def
  /ZAREF ZFCTR ZXCTR ldiagangleto def
  /ZAMIN 0 dg def
  /ZPMIN [ circum (CTR) ldiagdolabel ZAREF ZAMIN sub
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMIN sub ldiagatangle
	 ldiagpadd ] cvx def

  /ZAMAX 90 dg def
  /ZPMAX [ circum (CTR) ldiagdolabel ZAREF ZAMAX sub
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMAX sub ldiagatangle
	 ldiagpadd ] cvx def

  1 1 20
  { /xval exch def
    /ZAMID ZAMIN ZAMAX add 0.5 mul def
    /ZPMID [ circum (CTR) ldiagdolabel ZAREF ZAMID sub
	   circum (CIRCUM) ldiagdolabel ldiagpadd
	   0 0 extra ZAREF ZAMID sub ldiagatangle
	   ldiagpadd ] cvx def
    ZPMID ZXCTR ldiagdistance ZFCTR ZXCTR ldiagdistance gt
    {
      /ZAMAX [ ZAMID ] cvx def
      /ZPMAX [ ZPMID ] cvx def
    }
    {
      /ZAMIN [ ZAMID ] cvx def
      /ZPMIN [ ZPMID ] cvx def
    } ifelse
  } for
  ZPMID
} def

% implement cabout function
% logical form:  <circum> <extra> <centre> cabout <point>
% actual form:   { <labelorpoint> } cvlit <length> [ <point> ] cvx cabout <point>
/ldiagcabout
{
  /centre exch def
  /extra exch def
  /circum exch def

  /ZXCTR [ centre ] cvx def
  /ZFCTR [ circum (CTR) ldiagdolabel ] cvx def
  /ZAREF ZFCTR ZXCTR ldiagangleto def
  /ZAMIN 0 dg def
  /ZPMIN [ circum (CTR) ldiagdolabel ZAREF ZAMIN add
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMIN add ldiagatangle
	 ldiagpadd ] cvx def

  /ZAMAX 90 dg def
  /ZPMAX [ circum (CTR) ldiagdolabel ZAREF ZAMAX add
	 circum (CIRCUM) ldiagdolabel ldiagpadd
	 0 0 extra ZAREF ZAMAX add ldiagatangle
	 ldiagpadd ] cvx def

  1 1 20
  { /xval exch def
    /ZAMID ZAMIN ZAMAX add 0.5 mul def
    /ZPMID [ circum (CTR) ldiagdolabel ZAREF ZAMID add
	   circum (CIRCUM) ldiagdolabel ldiagpadd
	   0 0 extra ZAREF ZAMID add ldiagatangle
	   ldiagpadd ] cvx def
    ZPMID ZXCTR ldiagdistance ZFCTR ZXCTR ldiagdistance gt
    {
      /ZAMAX [ ZAMID ] cvx def
      /ZPMAX [ ZPMID ] cvx def
    }
    {
      /ZAMIN [ ZAMID ] cvx def
      /ZPMIN [ ZPMID ] cvx def
    } ifelse
  } for
  ZPMID
} def

% fromarrowlength toarrowlength { from } { to } xindent zindent ldiaglinepath -
/ldiaglinepath
{
  % (entering ldiaglinepath) 0 ldiagdebugprint
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagangleto
  /FROM@ANGLE ldiagangledef 
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  FROM@ANGLE /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg sub to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TO@ANGLE 180 dg sub ldiagatangle ldiagpadd /TO ldiagpointdef

  FROM 0.5 ldiagpmul TO 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  FROM@ANGLE /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  0 0 ZINDENT FROM@ANGLE ldiagatangle TO ldiagpsub /LTO ldiagpointdef
  FROM@ANGLE /LTO@ANGLE ldiagangledef

  direct { FROM TO } { FROM LFROM LMID LTO TO } ifelse

  % (leaving ldiaglinepath) 0 ldiagdebugprint
} def

% fromarrowlength toarrowlength { from } { to } xindent zindent pathgap ldiagdoublelinepath -
/ldiagdoublelinepath
{
  % (entering ldiagdoublelinepath) 0 ldiagdebugprint
  /pathgap exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagangleto
  /FROM@ANGLE ldiagangledef 
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  FROM@ANGLE /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg sub to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TO@ANGLE 180 dg sub ldiagatangle ldiagpadd /TO ldiagpointdef

  FROM 0.5 ldiagpmul TO 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  FROM@ANGLE /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  0 0 ZINDENT FROM@ANGLE ldiagatangle TO ldiagpsub /LTO ldiagpointdef
  FROM@ANGLE /LTO@ANGLE ldiagangledef

  direct {
    FROM pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    TO   pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    []
    FROM pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    TO   pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
  }
  {
    FROM  pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LFROM pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LMID  pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    LTO   pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    TO    pathgap 2 div FROM@ANGLE 90 dg sub ldiagatangle
    []
    FROM  pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LFROM pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LMID  pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    LTO   pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
    TO    pathgap 2 div FROM@ANGLE 90 dg add ldiagatangle
  } ifelse

  % (leaving ldiagdoublelinepath) 0 ldiagdebugprint
} def

% fromarrowlen toarrowlen { from } { to } xindent zindent bias ldiagacurvepath -
/ldiagacurvepath
{
  % (entering ldiagacurvepath) 0 ldiagdebugprint
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  %/B1 bias 0.02 ft ldiagmax def
  %/B2 from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagdistance 0.5 mul def
  %/BIAS B1 B2 ldiagmin def
  /BIAS bias 0.02 ft ldiagmax def
  /XMID [ from (CTR) ldiagdolabel 0.5 ldiagpmul
	  to   (CTR) ldiagdolabel 0.5 ldiagpmul ldiagpadd ] cvx def
  /XTOP [ XMID 0 0 BIAS from (CTR) ldiagdolabel to (CTR) ldiagdolabel
	  ldiagangleto 90 dg sub ldiagatangle ldiagpadd ] cvx def
  /CTR [ from (CTR) ldiagdolabel XTOP ldiaglinebetween
	 to   (CTR) ldiagdolabel XTOP ldiaglinebetween
	 ldiaglineintersect ] cvx def

  from fromarrowlength [ CTR ] cvx ldiagaabout /FROM ldiagpointdef
  from (CTR) ldiagdolabel FROM ldiagdistance 0 gt
  { from (CTR) ldiagdolabel FROM ldiagangleto
  }
  { CTR FROM ldiagangleto 90 dg add
  } ifelse /FROM@ANGLE ldiagangledef

  to toarrowlength [ CTR ] cvx ldiagcabout /TO ldiagpointdef
  TO to (CTR) ldiagdolabel ldiagdistance 0 gt
  { TO to (CTR) ldiagdolabel ldiagangleto
  }
  { CTR TO ldiagangleto 90 dg add
  } ifelse /TO@ANGLE ldiagangledef

  /RADIUS CTR FROM ldiagdistance def
  CTR 0 0 RADIUS CTR FROM ldiagangleto 360 dg CTR TO ldiagangleto
  add CTR FROM ldiagangleto sub cvi 360 mod 0.5 mul add
  ldiagatangle ldiagpadd /LMID ldiagpointdef
  CTR LMID ldiagangleto 90 dg add /LMID@ANGLE ldiagangledef

  /XINDENT xindent FROM LMID ldiagdistance ldiagmin def
  CTR 0 0 RADIUS CTR FROM 0 0 XINDENT FROM@ANGLE ldiagatangle
  ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LFROM ldiagpointdef
  CTR LFROM ldiagangleto 90 dg add /LFROM@ANGLE ldiagangledef

  /ZINDENT zindent TO LMID ldiagdistance ldiagmin def
  CTR 0 0 RADIUS CTR TO 0 0 ZINDENT TO@ANGLE 180 dg add
  ldiagatangle ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LTO ldiagpointdef
  CTR LTO ldiagangleto 90 dg add /LTO@ANGLE ldiagangledef

  direct
  { FROM [CTR] TO }
  { FROM [CTR] LFROM [CTR] LMID [CTR] LTO [CTR] TO }
  ifelse

  % (leaving ldiagacurvepath) 0 ldiagdebugprint
} def

% fromarrowlen toarrowlen { from } { to } xindent zindent bias ldiagccurvepath -
/ldiagccurvepath
{
  % (entering ldiagccurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  %/B1 bias 0.02 ft ldiagmax def
  %/B2 from (CTR) ldiagdolabel to (CTR) ldiagdolabel ldiagdistance 0.5 mul def
  %/BIAS B1 B2 ldiagmin def
  /BIAS bias 0.02 ft ldiagmax def
  /XMID [ from (CTR) ldiagdolabel 0.5 ldiagpmul
	to (CTR) ldiagdolabel 0.5 ldiagpmul ldiagpadd ] cvx def
  /XTOP [ XMID 0 0 BIAS from (CTR) ldiagdolabel to (CTR) ldiagdolabel
	ldiagangleto 90 dg add ldiagatangle ldiagpadd ] cvx def
  /CTR [ from (CTR) ldiagdolabel XTOP ldiaglinebetween
         to (CTR) ldiagdolabel XTOP ldiaglinebetween ldiaglineintersect ] cvx def

  from fromarrowlength [ CTR ] cvx ldiagcabout /FROM ldiagpointdef
  from (CTR) ldiagdolabel FROM ldiagdistance 0 gt
  { from (CTR) ldiagdolabel FROM ldiagangleto }
  { CTR FROM ldiagangleto 90 dg sub }
  ifelse /FROM@ANGLE ldiagangledef

  to toarrowlength [ CTR ] cvx ldiagaabout /TO ldiagpointdef
  TO to (CTR) ldiagdolabel ldiagdistance 0 gt
  { TO to (CTR) ldiagdolabel ldiagangleto }
  { CTR TO ldiagangleto 90 dg sub }
  ifelse /TO@ANGLE ldiagangledef

  /RADIUS [ CTR FROM ldiagdistance ] cvx def
  CTR 0 0 RADIUS CTR TO ldiagangleto 360 dg CTR FROM ldiagangleto add
  CTR TO ldiagangleto sub cvi 360 cvi mod 2 div add ldiagatangle
  ldiagpadd /LMID ldiagpointdef
  CTR LMID ldiagangleto 90 dg sub /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM LMID ldiagdistance ldiagmin ] cvx def
  CTR 0 0 RADIUS CTR FROM 0 0 XINDENT FROM@ANGLE ldiagatangle ldiagpadd
  ldiagangleto ldiagatangle ldiagpadd /LFROM ldiagpointdef
  CTR LFROM ldiagangleto 90 dg sub /LFROM@ANGLE ldiagangledef

  /ZINDENT [ zindent TO LMID ldiagdistance ldiagmin ] cvx def
  CTR 0 0 RADIUS CTR TO 0 0 ZINDENT TO@ANGLE 180 dg add ldiagatangle
  ldiagpadd ldiagangleto ldiagatangle ldiagpadd /LTO ldiagpointdef
  CTR LTO ldiagangleto 90 dg sub /LTO@ANGLE ldiagangledef

  direct
  { FROM [CTR clockwise] TO }
  { FROM [CTR clockwise] LFROM [CTR clockwise]
  LMID [CTR clockwise] LTO [CTR clockwise] TO }
  ifelse
  % (leaving ldiagccurvepath) 0 ldiagdebugprint
} def


% farr tarr { from } { to } xindent zindent [frompt] [topt] ldiagbezierpath -
/ldiagbezierpath
{
  % (entering ldiagbezierpath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  cvx /topt exch def
  cvx /frompt exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel frompt ldiagangleto /FROM@ANGLE ldiagangledef
  from (CTR) ldiagdolabel FROM@ANGLE from (CIRCUM) ldiagdolabel
  ldiagpadd 0 0 fromarrowlength FROM@ANGLE ldiagatangle ldiagpadd
  /FROM ldiagpointdef

  topt to (CTR) ldiagdolabel ldiagangleto /TO@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TO@ANGLE 180 dg add to (CIRCUM) ldiagdolabel
  ldiagpadd 0 0 toarrowlength TO@ANGLE 180 dg add ldiagatangle ldiagpadd
  /TO ldiagpointdef

  FROM 0 0 xindent FROM@ANGLE ldiagatangle ldiagpadd
  /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef

  TO 0 0 zindent TO@ANGLE 180 dg add ldiagatangle ldiagpadd
  /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  FROM TO ldiagpadd frompt ldiagpadd topt ldiagpadd 0.25 ldiagpmul
  /LMID ldiagpointdef

  FROM [frompt topt] TO

  % (leaving ldiagbezierpath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent ldiagvhlinepath -
/ldiagvhlinepath
{
  % (entering ldiagvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /XINDENT [ xindent FDIST ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST ldiagmin ] cvx def
  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  CTR /LMID ldiagpointdef
  0 0 1 ft FANG 180 dg add ldiagatangle
  0 0 1 ft TANG 180 dg add ldiagatangle
  ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM LMID LTO TO

  % (leaving ldiagvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent radius ldiagvhcurvepath -
/ldiagvhcurvepath
{
  % (entering ldiagvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /RADIUS [ radius FDIST TDIST ldiagmin ldiagmin ] cvx def
  /XINDENT [ xindent FDIST RADIUS sub ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST RADIUS sub ldiagmin ] cvx def

  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  /FCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd ] cvx def
  /TCTR [ CTR 0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  /XCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd
              0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  XCTR 0 0 RADIUS XCTR CTR ldiagangleto ldiagatangle ldiagpadd
  /LMID ldiagpointdef
  FCTR TCTR ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM FCTR
  {[XCTR clockwise]} {} {} {} {} {[XCTR]} {[XCTR clockwise]} {[XCTR]}
  FCTR TCTR ldiagangleto ldiagquadcase
  TCTR LTO TO

  % (leaving ldiagvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent ldiaghvlinepath -
/ldiaghvlinepath
{
  % (entering ldiaghvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ to (CTR) ldiagdolabel pop from (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /XINDENT [ xindent FDIST ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST ldiagmin ] cvx def

  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  CTR /LMID ldiagpointdef
  0 0 1 ft FANG 180 dg add ldiagatangle
  0 0 1 ft TANG 180 dg add ldiagatangle ldiagangleto
  /LMID@ANGLE ldiagangledef

  FROM LFROM LMID LTO TO

  % (leaving ldiaghvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent radius ldiaghvcurvepath -
/ldiaghvcurvepath
{
  % (entering ldiaghvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /CTR [ to (CTR) ldiagdolabel pop from (CTR) ldiagdolabel exch pop ] cvx def
  /FANG [ from (CTR) ldiagdolabel CTR ldiagangleto ] cvx def
  /TANG [ to (CTR) ldiagdolabel CTR ldiagangleto ] cvx def

  from (CTR) ldiagdolabel FANG from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FANG ldiagatangle ldiagpadd /FROM ldiagpointdef
  FANG /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel TANG to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TANG ldiagatangle ldiagpadd /TO ldiagpointdef
  TANG 180 dg add /TO@ANGLE ldiagangledef

  /FDIST [ FROM CTR ldiagdistance ] cvx def
  /TDIST [ TO CTR ldiagdistance ] cvx def
  /RADIUS [ radius FDIST TDIST ldiagmin ldiagmin ] cvx def
  /XINDENT [ xindent FDIST RADIUS sub ldiagmin ] cvx def
  /ZINDENT [ zindent TDIST RADIUS sub ldiagmin ] cvx def
  FROM 0 0 XINDENT FANG ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TANG ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef

  /FCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd ] cvx def
  /TCTR [ CTR 0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  /XCTR [ CTR 0 0 RADIUS FROM@ANGLE 180 dg add ldiagatangle ldiagpadd
	      0 0 RADIUS TO@ANGLE ldiagatangle ldiagpadd ] cvx def
  XCTR 0 0 RADIUS XCTR CTR ldiagangleto ldiagatangle ldiagpadd
  /LMID ldiagpointdef
  FCTR TCTR ldiagangleto /LMID@ANGLE ldiagangledef

  FROM LFROM FCTR
  {[XCTR]} {} {} {} {} {[XCTR clockwise]} {[XCTR]} {[XCTR clockwise]}
  FCTR TCTR ldiagangleto ldiagquadcase
  TCTR LTO TO

  % (leaving ldiaghvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiaglvrlinepath -
/ldiaglvrlinepath
{
  % (entering ldiaglvrlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 180 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 180 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  180 dg /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel 180 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 180 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  0 dg /TO@ANGLE ldiagangledef

  /XLEFT [ FROM pop TO pop ldiagmin bias sub ] cvx def
  XLEFT FROM exch pop /P1 ldiagpointdef
  XLEFT TO exch pop /P2 ldiagpointdef
  /VERT [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 180 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 0 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef

  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  XINDENT 0 FROM ldiagpsub /LFROM ldiagpointdef
  180 dg /LFROM@ANGLE ldiagangledef
  ZINDENT 0 TO ldiagpsub /LTO ldiagpointdef
  0 dg /LTO@ANGLE ldiagangledef

  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaglvrlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias radius ldiaglvrcurvepath -
/ldiaglvrcurvepath
{
  % (entering ldiaglvrcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 180 dg from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength 180 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  180 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 180 dg to (CIRCUM) ldiagdolabel ldiagpadd 0 0
  toarrowlength 180 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  0 dg /TO@ANGLE ldiagangledef
  /XLEFT [ FROM pop TO pop ldiagmin bias sub ] cvx def
  /XP1 [ XLEFT FROM exch pop ] cvx def
  /XP2 [ XLEFT TO exch pop ] cvx def
  /VERT [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  XINDENT 0 FROM ldiagpsub /LFROM ldiagpointdef
  180 dg /LFROM@ANGLE ldiagangledef
  ZINDENT 0 TO ldiagpsub /LTO ldiagpointdef
  0 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 0 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {  } { [XP1CTR] P1 [XP1CTR] } {  } { [XP1CTR clockwise] P1 [XP1CTR clockwise] }
  {  } {  } {  } {  } VERT round ldiagquadcase
  XP1POST LMID XP2PRE
  {  } { [XP2CTR] P2 [XP2CTR] } {  } { [XP2CTR clockwise] P2 [XP2CTR clockwise] }
  {  } {  } {  } {  } VERT round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiaglvrcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiagrvllinepath -
/ldiagrvllinepath
{
  % (entering ldiagrvllinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 0 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 0 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  0 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 0 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 0 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  180 dg /TO@ANGLE ldiagangledef
  /XRIGHT [ FROM pop TO pop ldiagmax bias add ] cvx def
  XRIGHT FROM exch pop /P1 ldiagpointdef
  XRIGHT TO exch pop /P2 ldiagpointdef
  /VERT [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 0 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 180 dg ldiagatangle ldiagpadd 0 0 1 ft VERT ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM XINDENT 0 ldiagpadd /LFROM ldiagpointdef
  0 dg /LFROM@ANGLE ldiagangledef
  TO ZINDENT 0 ldiagpadd /LTO ldiagpointdef
  180 dg /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagrvllinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent bias radius ldiagrvlcurvepath -
/ldiagrvlcurvepath
{
  % (entering ldiagrvlcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 0 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 0 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  0 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 0 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 0 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  180 dg /TO@ANGLE ldiagangledef
  /XRIGHT [ FROM pop TO pop ldiagmax bias add ] cvx def
  /XP1 [ XRIGHT FROM exch pop ] cvx def
  /XP2 [ XRIGHT TO exch pop ] cvx def
  /VERT [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM XINDENT 0 ldiagpadd /LFROM ldiagpointdef
  0 dg /LFROM@ANGLE ldiagangledef
  TO ZINDENT 0 ldiagpadd /LTO ldiagpointdef
  180 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 0.5 mul ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 180 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {[XP1CTR clockwise] P1 [XP1CTR clockwise]} {} {[XP1CTR] P1 [XP1CTR]}
  {} {} {} {} VERT round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {[XP2CTR clockwise] P2 [XP2CTR clockwise]} {} {[XP2CTR] P2 [XP2CTR]}
  {} {} {} {} VERT round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiagrvlcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiagdhulinepath -
/ldiagdhulinepath
{
  % (entering ldiagdhulinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 270 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  270 dg /FROM@ANGLE ldiagangledef

  to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 270 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  90 dg /TO@ANGLE ldiagangledef

  /XDOWN [ FROM exch pop TO exch pop ldiagmin bias sub ] cvx def
  FROM pop XDOWN /P1 ldiagpointdef
  TO pop XDOWN /P2 ldiagpointdef
  /HORIZ [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 270 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 90 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef

  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef

  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  0 XINDENT FROM ldiagpsub /LFROM ldiagpointdef
  270 dg /LFROM@ANGLE ldiagangledef
  0 ZINDENT TO ldiagpsub /LTO ldiagpointdef
  90 dg /LTO@ANGLE ldiagangledef

  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagdhulinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias radius ldiagdhucurvepath -
/ldiagdhucurvepath
{
  % (entering ldiagdhucurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength 270 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  270 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd 0 0
  toarrowlength 270 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  90 dg /TO@ANGLE ldiagangledef
  /XDOWN [ FROM exch pop TO exch pop ldiagmin bias sub ] cvx def
  /XP1 [ FROM pop XDOWN ] cvx def
  /XP2 [ TO pop XDOWN ] cvx def
  /HORIZ [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  0 XINDENT FROM ldiagpsub /LFROM ldiagpointdef
  270 dg /LFROM@ANGLE ldiagangledef
  0 ZINDENT TO ldiagpsub /LTO ldiagpointdef
  90 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS HORIZ ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 90 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {} { [XP1CTR clockwise] P1 [XP1CTR clockwise] } {} { [XP1CTR] P1 [XP1CTR] }
  {} {} {} HORIZ round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {} { [XP2CTR clockwise ] P2 [XP2CTR clockwise ] } {} { [XP2CTR] P2 [XP2CTR] }
  {} {} {} HORIZ round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiagdhucurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias ldiaguhdlinepath -
/ldiaguhdlinepath
{
  % (entering ldiaguhdlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 90 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  90 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 90 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  270 dg /TO@ANGLE ldiagangledef
  /XUP [ FROM exch pop TO exch pop ldiagmax bias add ] cvx def
  FROM pop XUP /P1 ldiagpointdef
  TO pop XUP /P2 ldiagpointdef
  /HORIZ [ P1 P2 ldiagangleto ] cvx def
  P1 P1 0 0 1 ft 90 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P1@ANGLE ldiagangledef
  P2 P2 0 0 1 ft 270 dg ldiagatangle ldiagpadd 0 0 1 ft HORIZ ldiagatangle
  ldiagpadd ldiagangleto /P2@ANGLE ldiagangledef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 XINDENT ldiagpadd /LFROM ldiagpointdef
  90 dg /LFROM@ANGLE ldiagangledef
  TO 0 ZINDENT ldiagpadd /LTO ldiagpointdef
  270 dg /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaguhdlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent bias radius ldiaguhdcurvepath -
/ldiaguhdcurvepath
{
  % (entering ldiaguhdcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength 90 dg ldiagatangle ldiagpadd /FROM ldiagpointdef
  90 dg /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength 90 dg ldiagatangle ldiagpadd /TO ldiagpointdef
  270 dg /TO@ANGLE ldiagangledef
  /XUP [ FROM exch pop TO exch pop ldiagmax bias add ] cvx def
  /XP1 [ FROM pop XUP ] cvx def
  /XP2 [ TO pop XUP ] cvx def
  /HORIZ [ XP1 XP2 ldiagangleto ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  HORIZ /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 XINDENT ldiagpadd /LFROM ldiagpointdef
  90 dg /LFROM@ANGLE ldiagangledef
  TO 0 ZINDENT ldiagpadd /LTO ldiagpointdef
  270 dg /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 0.5 mul ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS HORIZ ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd
  /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS HORIZ ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RADIUS 270 dg ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd
  /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FROM LFROM XP1PRE
  {} {} {[XP1CTR] P1 [XP1CTR]} {} {[XP1CTR clockwise] P1 [XP1CTR clockwise]}
  {} {} {} HORIZ round ldiagquadcase
  XP1POST LMID XP2PRE
  {} {} {[XP2CTR] P2 [XP2CTR]} {} {[XP2CTR clockwise] P2 [XP2CTR clockwise]}
  {} {} {} HORIZ round ldiagquadcase
  XP2POST LTO TO

  % (leaving ldiaguhdcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent hfrac hbias ldiaghvhlinepath -
/ldiaghvhlinepath % still to do
{
  % (entering ldiaghvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 0 dg } { 180 dg } { 180 dg } { 0 dg }
  { 0 dg } { 0 dg } { 180 dg } { 180 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg add ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM pop TO pop sub abs hfrac mul hbias add ] cvx def
  FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  P1 pop TO exch pop /P2 ldiagpointdef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  P1 P2 ldiagangleto /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiaghvhlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent hfrac hbias radius ldiaghvhcurvepath -
/ldiaghvhcurvepath % still to do
{
  % (entering ldiaghvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 0 dg } { 180 dg } { 180 dg } { 0 dg }
  { 0 dg } { 0 dg } { 180 dg } { 180 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg add ] cvx def

  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef

  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM pop TO pop sub abs hfrac mul hbias add ] cvx def
  /XP1 [ FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2 [ XP1 pop TO exch pop ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  /VERT [ XP1 XP2 ldiagangleto round ] cvx def
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS TODIRN ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ 0 0 RADIUS VERT ldiagatangle XP2POST ldiagpsub ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  VERT FRDIRN sub 90 eq
  { /P1GO [ anticlockwise ] cvx def /P2GO [ clockwise ] cvx def }
  { /P1GO [ clockwise ] cvx def /P2GO [ anticlockwise ] cvx def }
  ifelse
  FROM LFROM
  XP1PRE [XP1CTR P1GO] P1 [XP1CTR P1GO] XP1POST
  LMID
  XP2PRE [XP2CTR P2GO] P2 [XP2CTR P2GO] XP2POST
  LTO TO

  % (leaving ldiaghvhcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent hfrac hbias ldiagvhvlinepath -
/ldiagvhvlinepath % still to do
{
  % (entering ldiagvhvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 90 dg } { 270 dg } { 270 dg } { 0 dg }
  { 90 dg } { 270 dg } { 270 dg } { 90 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg sub ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM exch pop TO exch pop sub abs hfrac mul hbias ft add ] cvx def
  FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  TO pop P1 exch pop /P2 ldiagpointdef
  P1 0.5 ldiagpmul P2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  P1 P2 ldiagangleto /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent P2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  FROM LFROM P1 LMID P2 LTO TO

  % (leaving ldiagvhvlinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def


% farr tarr { from } { to } xindent zindent hfrac hbias radius ldiagvhvcurvepath -
/ldiagvhvcurvepath % still to do
{
  % (entering ldiagvhvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /hbias exch def
  /hfrac exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /FRDIRN [ { 90 dg } { 270 dg } { 270 dg } { 0 dg }
  { 90 dg } { 270 dg } { 270 dg } { 90 dg }
  from (CTR) ldiagdolabel to (CTR) ldiagdolabel
  ldiagangleto ldiagquadcase ] cvx def
  /TODIRN [ FRDIRN 180 dg sub ] cvx def
  from (CTR) ldiagdolabel FRDIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength FRDIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  FRDIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel TODIRN to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength TODIRN ldiagatangle ldiagpadd /TO ldiagpointdef
  FRDIRN /TO@ANGLE ldiagangledef
  /BIAS [ FROM exch pop TO exch pop sub abs hfrac mul hbias add ] cvx def
  /XP1 [ FROM 0 0 BIAS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2 [ TO pop XP1 exch pop ] cvx def
  XP1 0.5 ldiagpmul XP2 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  /VERT [ XP1 XP2 ldiagangleto round ] cvx def
  VERT /LMID@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1 ldiagdistance ldiagmin ] cvx def
  /ZINDENT [ zindent XP2 TO ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT FRDIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FRDIRN /LFROM@ANGLE ldiagangledef
  TO 0 0 ZINDENT TODIRN ldiagatangle ldiagpadd /LTO ldiagpointdef
  FRDIRN /LTO@ANGLE ldiagangledef
  /RADIUS [ radius XP1 XP2 ldiagdistance 2 div ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RADIUS TODIRN ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RADIUS VERT ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RADIUS XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1PRE XP1POST ldiagangleto /P1@ANGLE ldiagangledef
  /XP2PRE [ 0 0 RADIUS VERT ldiagatangle XP2 ldiagpsub ] cvx def
  /XP2POST [ XP2 0 0 RADIUS FRDIRN ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ 0 0 RADIUS VERT ldiagatangle XP2POST ldiagpsub ] cvx def
  XP2CTR 0 0 RADIUS XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2PRE XP2POST ldiagangleto /P2@ANGLE ldiagangledef
  FRDIRN VERT sub 90 eq
  { /P1GO [ clockwise ] cvx def /P2GO [ anticlockwise ] cvx def }
  { /P1GO [ anticlockwise ] cvx def /P2GO [ clockwise ] cvx def }
  ifelse
  FROM LFROM
  XP1PRE [XP1CTR P1GO] P1 [XP1CTR P1GO] XP1POST
  LMID
  XP2PRE [XP2CTR P2GO] P2 [XP2CTR P2GO] XP2POST
  LTO TO


  % (leaving ldiagvhvcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias ldiagdwraplinepath -
/ldiagdwraplinepath
{
  % (entering ldiagdwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop
  lt { 180 dg } { 0 dg } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd 0 0
  fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  DIRN 180 dg eq { 225 dg } { -45 dg } ifelse /P1@ANGLE ldiagangledef
  TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd
  /P4 ldiagpointdef
  DIRN 180 dg eq { 135 dg } { 45 dg } ifelse /P4@ANGLE ldiagangledef
  /YC [ from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmin bias 0 ldiagmax sub ] cvx def
  P1 pop YC /P2 ldiagpointdef
  P4@ANGLE 180 dg sub /P2@ANGLE ldiagangledef
  P4 pop YC /P3 ldiagpointdef
  P1@ANGLE 180 dg sub /P3@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  /ZINDENT [ zindent TO P4 ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  P2 0.5 ldiagpmul P3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  FROM P1 P2 P3 P4 TO

  % (leaving ldiagdwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias radius
% ldiagdwrapcurvepath -
/ldiagdwrapcurvepath
{
  % (entering ldiagdwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  /CLOCK [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { anticlockwise } { clockwise } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  /XP1 [ FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd ] cvx def
  /XP4 [ TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd ] cvx def
  /YC [ from (CTR) ldiagdolabel 270 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 270 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmin bias 0 ldiagmax sub ] cvx def
  /XP2 [ XP1 pop YC ] cvx def
  /XP3 [ XP4 pop YC ] cvx def
  /RP1 [ radius XP1 FROM ldiagdistance XP1 XP2 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RP1 XP1 FROM ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RP1 XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1CTR P1 ldiagangleto DIRN add 90 dg sub /P1@ANGLE ldiagangledef
  /RP2 [ radius XP1 XP2 ldiagdistance 2 div XP2 XP3 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP2PRE [ XP2 0 0 RP2 XP2 XP1 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2POST [ XP2 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RP2 XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2CTR P2 ldiagangleto DIRN add 90 dg sub /P2@ANGLE ldiagangledef
  /RP3 [ radius XP2 XP3 ldiagdistance 2 div XP3 XP4 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP3PRE [ XP3 0 0 RP3 XP3 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3POST [ XP3 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3CTR [ XP3PRE 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP3CTR 0 0 RP3 XP3CTR XP3 ldiagangleto ldiagatangle ldiagpadd /P3 ldiagpointdef
  XP3CTR P3 ldiagangleto DIRN add 90 dg sub /P3@ANGLE ldiagangledef
  /RP4 [ radius XP4 XP3 ldiagdistance 2 div XP4 TO ldiagdistance
  ldiagmin ldiagmin ] cvx def
  /XP4PRE [ XP4 0 0 RP4 XP4 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4POST [ XP4 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4CTR [ XP4PRE 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP4CTR 0 0 RP4 XP4CTR XP4 ldiagangleto ldiagatangle ldiagpadd /P4 ldiagpointdef
  XP4CTR P4 ldiagangleto DIRN add 90 dg sub /P4@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1PRE ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  XP2 0.5 ldiagpmul XP3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  /ZINDENT [ zindent TO XP4POST ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  FROM LFROM
  XP1PRE [XP1CTR CLOCK] XP1POST
  XP2PRE [XP2CTR CLOCK] XP2POST
  LMID
  XP3PRE [XP3CTR CLOCK] XP3POST
  XP4PRE [XP4CTR CLOCK] XP4POST
  LTO TO

  % (leaving ldiagdwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias ldiaguwraplinepath -
/ldiaguwraplinepath
{
  % (entering ldiaguwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd /P1 ldiagpointdef
  DIRN 180 dg eq { 135 dg } { 45 dg } ifelse /P1@ANGLE ldiagangledef
  TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd
  /P4 ldiagpointdef
  DIRN 180 dg eq { 225 dg } { -45 dg } ifelse /P4@ANGLE ldiagangledef
  /YC [ from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmax bias 0 ldiagmax add ] cvx def
  P1 pop YC /P2 ldiagpointdef
  P4@ANGLE 180 dg sub /P2@ANGLE ldiagangledef
  P4 pop YC /P3 ldiagpointdef
  P1@ANGLE 180 dg sub /P3@ANGLE ldiagangledef
  /XINDENT [ xindent FROM P1 ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  /ZINDENT [ zindent TO P4 ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  P2 0.5 ldiagpmul P3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  FROM P1 P2 P3 P4 TO

  % (leaving ldiaguwraplinepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% farr tarr { from } { to } xindent zindent bias fbias tbias radius
% ldiaguwrapcurvepath -
/ldiaguwrapcurvepath
{
  % (entering ldiaguwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
  /radius exch def
  /tbias exch def
  /fbias exch def
  /bias exch def
  /zindent exch def
  /xindent exch def
  cvlit /to exch def
  cvlit /from exch def
  /toarrowlength exch def
  /fromarrowlength exch def

  /DIRN [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { 180 dg } { 0 dg } ifelse ] cvx def
  /CLOCK [ from (CTR) ldiagdolabel pop to (CTR) ldiagdolabel pop lt
  { clockwise } { anticlockwise } ifelse ] cvx def
  from (CTR) ldiagdolabel DIRN from (CIRCUM) ldiagdolabel ldiagpadd
  0 0 fromarrowlength DIRN ldiagatangle ldiagpadd /FROM ldiagpointdef
  DIRN /FROM@ANGLE ldiagangledef
  to (CTR) ldiagdolabel DIRN 180 dg add to (CIRCUM) ldiagdolabel ldiagpadd
  0 0 toarrowlength DIRN 180 dg add ldiagatangle ldiagpadd /TO ldiagpointdef
  DIRN /TO@ANGLE ldiagangledef
  /XP1 [ FROM 0 0 fbias 0 ldiagmax DIRN ldiagatangle ldiagpadd ] cvx def
  /XP4 [ TO 0 0 tbias 0 ldiagmax DIRN 180 dg add ldiagatangle ldiagpadd ] cvx def
  /YC [ from (CTR) ldiagdolabel 90 dg from (CIRCUM) ldiagdolabel ldiagpadd
  exch pop to (CTR) ldiagdolabel 90 dg to (CIRCUM) ldiagdolabel ldiagpadd
  exch pop ldiagmax bias 0 ldiagmax add ] cvx def
  /XP2 [ XP1 pop YC ] cvx def
  /XP3 [ XP4 pop YC ] cvx def
  /RP1 [ radius XP1 FROM ldiagdistance XP1 XP2 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP1PRE [ XP1 0 0 RP1 XP1 FROM ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1POST [ XP1 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP1CTR [ XP1PRE 0 0 RP1 XP1 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP1CTR 0 0 RP1 XP1CTR XP1 ldiagangleto ldiagatangle ldiagpadd /P1 ldiagpointdef
  XP1CTR P1 ldiagangleto DIRN add 90 dg add /P1@ANGLE ldiagangledef
  /RP2 [ radius XP1 XP2 ldiagdistance 2 div XP2 XP3 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP2PRE [ XP2 0 0 RP2 XP2 XP1 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2POST [ XP2 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP2CTR [ XP2PRE 0 0 RP2 XP2 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP2CTR 0 0 RP2 XP2CTR XP2 ldiagangleto ldiagatangle ldiagpadd /P2 ldiagpointdef
  XP2CTR P2 ldiagangleto DIRN add 90 dg add /P2@ANGLE ldiagangledef
  /RP3 [ radius XP2 XP3 ldiagdistance 2 div XP3 XP4 ldiagdistance 2 div
  ldiagmin ldiagmin ] cvx def
  /XP3PRE [ XP3 0 0 RP3 XP3 XP2 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3POST [ XP3 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP3CTR [ XP3PRE 0 0 RP3 XP3 XP4 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP3CTR 0 0 RP3 XP3CTR XP3 ldiagangleto ldiagatangle ldiagpadd /P3 ldiagpointdef
  XP3CTR P3 ldiagangleto DIRN add 90 dg add /P3@ANGLE ldiagangledef
  /RP4 [ radius XP4 XP3 ldiagdistance 2 div XP4 TO ldiagdistance
  ldiagmin ldiagmin ] cvx def
  /XP4PRE [ XP4 0 0 RP4 XP4 XP3 ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4POST [ XP4 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  /XP4CTR [ XP4PRE 0 0 RP4 XP4 TO ldiagangleto ldiagatangle ldiagpadd ] cvx def
  XP4CTR 0 0 RP4 XP4CTR XP4 ldiagangleto ldiagatangle ldiagpadd /P4 ldiagpointdef
  XP4CTR P4 ldiagangleto DIRN add 90 dg add /P4@ANGLE ldiagangledef
  /XINDENT [ xindent FROM XP1PRE ldiagdistance ldiagmin ] cvx def
  FROM 0 0 XINDENT DIRN ldiagatangle ldiagpadd /LFROM ldiagpointdef
  FROM@ANGLE /LFROM@ANGLE ldiagangledef
  XP2 0.5 ldiagpmul XP3 0.5 ldiagpmul ldiagpadd /LMID ldiagpointdef
  DIRN 180 dg sub /LMID@ANGLE ldiagangledef
  /ZINDENT [ zindent TO XP4POST ldiagdistance ldiagmin ] cvx def
  TO 0 0 ZINDENT DIRN 180 dg add ldiagatangle ldiagpadd /LTO ldiagpointdef
  TO@ANGLE /LTO@ANGLE ldiagangledef
  FROM LFROM
  XP1PRE [XP1CTR CLOCK] XP1POST
  XP2PRE [XP2CTR CLOCK] XP2POST
  LMID
  XP3PRE [XP3CTR CLOCK] XP3POST
  XP4PRE [XP4CTR CLOCK] XP4POST
  LTO TO

  % (leaving ldiaguwrapcurvepath) 0 ldiagdebugprint
  % count (  stack size is) 1 ldiagdebugprint pop
} def

% shape and labels of the @SolidArrowHead symbol
% - ldiagsolidarrowhead -
/ldiagsolidarrowhead
{
  0 0 xsize ysize 0.5 mul 0 ysize
} def

% shape and labels of the @SolidWithBarArrowHead symbol
% <pathwidth> ldiagsolidwithbararrowhead -
/ldiagsolidwithbararrowhead
{
  /pathwidth exch def
  /XBK [ xsize pathwidth 0.5 mul sub ] cvx def
  /XFW [ xsize pathwidth 0.5 mul add ] cvx def
  0 0 XBK ysize 0.5 mul XBK 0 XFW 0 XFW ysize
  XBK ysize XBK ysize 0.5 mul 0 ysize 0 0
} def

% shape and labels of the @OpenArrowHead symbol
% <pathwidth> <pathgap> ldiagopenarrowhead -
/ldiagopenarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /PSW [ 0 0 ] cvx def
  /PNW [ 0 ysize ] cvx def
  /PE  [ xsize ysize 0.5 mul ] cvx def
  /REL [ 0 0 pathwidth PE PNW ldiagangleto 90 add ldiagatangle ] cvx def
  pathgap 0 eq
  {
    /PNA [ 0 ysize 0.5 mul pathwidth 0.5 mul add ] cvx def
    /PSA [ 0 ysize 0.5 mul pathwidth 0.5 mul sub ] cvx def
    /PNI [ PNA PNA xsize 0 ldiagpadd PNW REL ldiagpadd
	   PE REL ldiagpadd ldiaglineintersect ] cvx def
    /PSI [ 0 pathwidth PNI ldiagpsub ] cvx def

    PSW PE PNW PNI PNA PSA PSI PSW
  }
  {
    /PNA [ 0 ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add ] cvx def
    /PSA [ 0 ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub ] cvx def
    /PNI [ PNA PNA xsize 0 ldiagpadd PNW REL ldiagpadd
	   PE REL ldiagpadd ldiaglineintersect ] cvx def
    /PSI [ 0 pathwidth pathgap add PNI ldiagpsub ] cvx def
    /PXA [ 0 pathwidth PNA ldiagpsub ] cvx def
    /PXI [ 0 pathwidth PNI ldiagpsub ] cvx def
    /PYA [ 0 pathwidth PSA ldiagpadd ] cvx def
    /PYI [ 0 pathwidth PSI ldiagpadd ] cvx def

    PSW PE PNW PNI PNA PXA PXI PYI PYA PSA PSI PSW
  } ifelse
} def

% shape and labels of the @HalfOpenArrowHead symbol
% <pathwidth> <pathgap> ldiaghalfopenarrowhead -
/ldiaghalfopenarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  0 0
  xsize ysize 0.5 mul
  0 ysize
  pathgap 0 eq
  {
    xsize 0.3 mul ysize 0.5 mul pathwidth 0.5 mul add
    0             ysize 0.5 mul pathwidth 0.5 mul add
    0             ysize 0.5 mul pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathwidth 0.5 mul sub
  }
  {
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul add pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul add
    0             ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub
    xsize 0.3 mul ysize 0.5 mul pathgap 0.5 mul sub pathwidth 0.5 mul sub
  } ifelse
  0 0
} def

% shape and labels of the @SolidCurvedArrowHead symbol
% - ldiagsolidcurvedarrowhead -
/ldiagsolidcurvedarrowhead
{
  0 0
  [0 0 xsize ysize 0.5 mul ldiaglinebetween
   xsize 0 xsize ysize ldiaglineintersect clockwise]
  xsize ysize 0.5 mul
  [xsize ysize 0.5 mul 0 ysize ldiaglinebetween
   xsize 0 xsize ysize ldiaglineintersect clockwise]
  0 ysize
} def

% shape and labels of the @OpenCurvedArrowHead symbol
% <pathwidth> <pathgap> ldiagopencurvedarrowhead -
/ldiagopencurvedarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /LR [ 0 0 xsize ysize 0.5 mul ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /UR [ xsize ysize 0.5 mul 0 ysize ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /PW2 [ pathwidth 0.5 mul ] cvx def
  0 0
  [LR clockwise]
  xsize ysize 0.5 mul
  [UR clockwise]
  0 ysize
  pathgap 0 eq
  {
    /UMID [
	0 ysize 0.5 mul PW2 add
	xsize ysize 0.5 mul PW2 add
	0 ysize 0 0 1 ft UR 0 ysize ldiagangleto 90 add ldiagatangle
	ldiagpadd 0 ysize ldiaglineintersect
    ] cvx def
    /LMID [ 0 pathwidth UMID ldiagpsub ] cvx def
    UMID
    0 ysize 0.5 mul PW2 add
    0 ysize 0.5 mul PW2 sub
    LMID
  }
  {
    /UMIDU [
	0 ysize 0.5 mul PW2 add pathgap 0.5 mul add
	xsize ysize 0.5 mul PW2 add pathgap 0.5 mul add
	0 ysize 0 0 1 ft UR 0 ysize ldiagangleto 90 add ldiagatangle
	ldiagpadd 0 ysize ldiaglineintersect
    ] cvx def
    /UMIDL [ 0 pathwidth UMIDU ldiagpsub ] cvx def
    /LMIDL [ 0 pathgap 0 pathwidth UMIDU ldiagpsub ldiagpsub ] cvx def
    /LMIDU [ 0 pathwidth LMIDL ldiagpadd ] cvx def
    UMIDU
    0 UMIDU exch pop
    0 UMIDL exch pop
    UMIDL
    LMIDU
    0 LMIDU exch pop
    0 LMIDL exch pop
    LMIDL
  } ifelse
  0 0
} def

% shape and labels of the @HalfOpenCurvedArrowHead symbol
% <pathwidth> <pathgap> ldiaghalfopencurvedarrowhead -
/ldiaghalfopencurvedarrowhead
{
  /pathgap exch def
  /pathwidth exch def
  /LR [ 0 0 xsize ysize 0.5 mul ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /UR [ xsize ysize 0.5 mul 0 ysize ldiaglinebetween
	xsize 0 xsize ysize ldiaglineintersect
      ] cvx def
  /BR [ 0 0 LR 0 ysize UR ldiaglineintersect ] cvx def
  /BRAD [ 0 0 BR ldiagdistance ] cvx def
  /PW2 [ pathwidth 0.5 mul ] cvx def
  0 0
  [LR clockwise]
  xsize ysize 0.5 mul
  [UR clockwise]
  0 ysize
  [BR clockwise]
  pathgap 0 eq
  {
    /XDIST [ BRAD dup mul PW2 dup mul sub sqrt ] cvx def
    /UMID [ BR XDIST PW2 ldiagpadd ] cvx def
    /LMID [ BR XDIST 0 PW2 sub ldiagpadd ] cvx def
    UMID
    0 ysize 0.5 mul PW2 add
    0 ysize 0.5 mul PW2 sub
    LMID
  }
  {
    /XDIST [ BRAD dup mul PW2 dup mul sub sqrt ] cvx def
    /UMIDU [ BR XDIST PW2 pathgap 0.5 mul add ldiagpadd ] cvx def
    /UMIDL [ 0 pathwidth UMIDU ldiagpsub ] cvx def
    /LMIDL [ BR XDIST 0 PW2 sub pathgap 0.5 mul sub ldiagpadd ] cvx def
    /LMIDU [ 0 pathwidth LMIDL ldiagpadd ] cvx def
    UMIDU
    0 UMIDU exch pop
    0 UMIDL exch pop
    UMIDL
    LMIDU
    0 LMIDU exch pop
    0 LMIDL exch pop
    LMIDL
  } ifelse
  [BR clockwise]
  0 0
} def

% shape and labels of the @ManyArrowHead symbol
% <pathwidth> ldiagmanyarrowhead -
/ldiagmanyarrowhead
{
  /pathwidth exch def
  /LL [ 0 ysize 2 div pathwidth 2 div sub ] cvx def
  /LU [ 0 ysize 2 div pathwidth 2 div add ] cvx def
  LL
  xsize 0
  xsize pathwidth
  LU
  LL
  []
  LL
  xsize LL exch pop
  xsize LU exch pop
  LU
  LL
  []
  LL
  xsize ysize pathwidth sub
  xsize ysize
  LU
  LL
} def

end
%%EndResource

%%BeginResource: procset LoutGraphPrependGraphic
% @PrependGraphic file graphf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @Graph (Version 1.0)       %
%                                                                    %
%  Version 1.0 by Jeffrey H. Kingston, December 1993.                %
%  swapxandy added September 2001 by JHK.                            %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

errordict begin
   /handleerror
   {
      {  /Times-Roman findfont 8 pt scalefont setfont
         0 setgray 4 pt 4 pt moveto
         $error /errorname get
         dup lgraphdict exch known
         { lgraphdict exch get }
         { 30 string cvs } ifelse
         show
         (  Command: ) show
         $error /command get 30 string cvs show
      } stopped {} if
      showpage stop
   } def
end

/lgraphdebugposy 730 def
/lgraphdebugposx 20 def

% - lgraphdebugnextline -
/lgraphdebugnextline
{
  lgraphdebugposy 72 lt
  { /lgraphdebugposx lgraphdebugposx 144 add store
    /lgraphdebugposy 432 store
  }
  {
    /lgraphdebugposy lgraphdebugposy 12 sub store
  } ifelse
  lgraphdebugposx lgraphdebugposy moveto
} def

% - lgraphdebugbeginindent -
/lgraphdebugbeginindent
{
  /lgraphdebugposx lgraphdebugposx 12 add store
} def

% - lgraphdebugendindent -
/lgraphdebugendindent
{
  /lgraphdebugposx lgraphdebugposx 12 sub store
} def

% <string> <int> lgraphdebugprint -
% must be defined outside lgraphdict since used in arbitrary places
% print <string> plus count or <int> stack entries, whichever is the smaller
/lgraphdebugprint
{
  exch
  gsave
  initgraphics
  lgraphdebugnextline
  /Times-Roman findfont 10 scalefont setfont
  0 setgray show
  lgraphdebugbeginindent
  count 1 sub 2 copy lt { pop } { exch pop } ifelse 1 sub
  0 exch 1 exch
  {
    lgraphdebugnextline
    index
    dup type (dicttype) eq
    {
      (begin dict) show
      lgraphdebugbeginindent
      {
        lgraphdebugnextline
        pop 100 string cvs show
      } forall
      lgraphdebugendindent
      lgraphdebugnextline
      (end dict) show
    }
    {
      dup type (arraytype) eq
      {
        (begin array) show
        lgraphdebugbeginindent
        {
          lgraphdebugnextline
          100 string cvs show
        } forall
        lgraphdebugendindent
        lgraphdebugnextline
        (end array) show
      }
      {
        100 string cvs show
      } ifelse
    } ifelse
  } for
  lgraphdebugendindent
  grestore
} def


/lgraphdict 200 dict def
lgraphdict begin

% error messages
/dictfull (dictfull error) def
/dictstackoverflow (dictstackoverflow error) def
/execstackoverflow (execstackoverflow error:  expression too complex?) def
/limitcheck (limitcheck error:  graph too complex or too large?) def
/syntaxerror (syntaxerror error:  syntax error in text of graph?) def
/typecheck (typecheck error:  syntax error in text of graph?) def
/undefined (undefined error:  unknown or misspelt symbol?) def
/rangecheck (rangecheck error:  undefined expression (e.g. divide by zero)?) def
/VMError (VMError error:  run out of memory?) def

% random number between x and y inclusive: x y dorand num
/dorand { 1 index sub 1 add rand exch mod add } def

% log to given base: base num dolog num
/dolog { ln exch ln div } def

% maximum of two numbers:  <num> <num> max <num>
/max { 2 copy gt { pop } { exch pop } ifelse } def

% add two points:  <point> <point> padd <point>
/padd { exch 3 1 roll add 3 1 roll add exch } def

% subtract first point from second:  <point> <point> psub <point>
/psub { 3 2 roll sub 3 1 roll exch sub exch } def

% distance between two points:  <point> <point> distance <length>
/distance { psub dup mul exch dup mul add sqrt } def

% point at angle and distance:  <point> <length> <angle> atangle <point>
/atangle { 2 copy cos mul 3 1 roll sin mul padd } def

% angle from one point to another:  <point> <point> angle <angle>
/angle { psub 2 copy 0 eq exch 0 eq and {pop} {exch atan} ifelse } def


% set up for line
% - linesetup <length> <dashlength>
/linesetup
{ newpath
  xcurr ycurr trpoint xprev yprev trpoint
  4 copy moveto lineto distance dashlength
} def

% set up for icon-avoiding line
% - ilinesetup <length> <dashlength>
/ilinesetup
{ newpath
  xprev yprev trpoint xcurr ycurr trpoint 4 copy
  4 copy angle symbolsize 1.5 mul exch 4 2 roll pop pop atangle
  6 2 roll 4 2 roll
  4 copy angle symbolsize 1.5 mul exch 4 2 roll pop pop atangle 
  4 copy moveto lineto distance dashlength
} def


% stroke a solid line:  <length> <dashlength> solid -
/solid
{ pop pop [] 0 setdash linewidth setlinewidth stroke
} def
  
% stroke a dashed line:   <length> <dashlength> dashed -
/dashed
{  2 copy 2 mul le 1 index 0 le or
   {  exch pop 1 pt max [ exch dup ] 0 setdash }
   {  dup [ exch 4 2 roll 2 copy div
      1 sub 2 div ceiling dup 4 1 roll
      1 add mul sub exch div ] 0 setdash
   } ifelse linewidth setlinewidth stroke
} def

% stroke a cdashed line:  <length> <dashlength> cdashed -
/cdashed
{  2 copy le 1 index 0 le or
   { exch pop 1 pt max [ exch dup ] dup 0 get 2 div setdash }
   { dup [ 4 2 roll exch 2 copy exch div
     2 div ceiling div 1 index sub
     ] exch 2 div setdash
   } ifelse linewidth setlinewidth stroke
} def

% stroke a dotted line:  <length> <dashlength> dotted -
/dotted
{  2 copy le 1 index 0 le or
   { exch pop 1 pt max [ exch 0 exch ] 0 setdash }
   { 1 index exch div ceiling div 0.99999 mul
     [ 0 3 2 roll ] 0 setdash
   } ifelse gsave 1 setlinecap linewidth setlinewidth stroke grestore newpath
} def

% stroke a noline line:  <length> <dashlength> noline -
/noline
{ pop pop
} def

% scale array elements by factor:  <array> <factor> scalearray <array>
/scalearray
{
  [ exch 3 2 roll
  { exch dup 3 1 roll mul exch } forall
  pop ]
} def

% sum array elements:  <array> sumarray <number>
/sumarray
{
  0 exch { add } forall
} def

% begin a more complex line: <length> <dashlength> linebegin -
/linebegin
{
  % (Entering linebegin) 2 debugprint
  20 dict begin
  /dashlen exch 1 pt max def
  /len exch def
  /gap dashlen def
  /halfgap dashlen 2 div def
  /dash dashlen def
  /halfdash dashlen 2 div def
  /dot 0 def
  % (Leaving linebegin) 0 debugprint
} def

% end a more complex line: <linecap> <cycle> <startpos> <stoppos> lineend -
/lineend
{
  % (Entering lineend) 3 debugprint
  /stoppos exch def
  /startpos exch def
  /cycle exch def
  /linecap exch def
  /stopposlen stoppos sumarray def
  /startposlen startpos sumarray def
  /cyclelen cycle sumarray def
  /effectivelen len startposlen add stopposlen sub def
  effectivelen 0 gt cyclelen 0 gt and
  {
    /repeats effectivelen cyclelen div ceiling def
    /factor len repeats cyclelen mul startposlen sub stopposlen add div def
    cycle factor scalearray startposlen factor mul setdash
    linecap setlinecap stroke
  } if
  end
  % (Leaving lineend) 0 debugprint
} def

% stroke a dotdashed line: <length> <dashlength> dotdashed -
/dotdashed
{
  linebegin
  1 [dash gap dot gap] [] [dash]
  lineend
} def

% stroke a dotcdashed line: <length> <dashlength> dotcdashed -
/dotcdashed
{
  linebegin
  1 [dash gap dot gap] [halfdash] [halfdash]
  lineend
} def

% stroke a dotdotdashed line: <length> <dashlength> dotdotdashed -
/dotdotdashed
{
  linebegin
  1 [dash gap dot gap dot gap] [] [dash]
  lineend
} def

% stroke a dotdotcdashed line: <length> <dashlength> dotdotcdashed -
/dotdotcdashed
{
  linebegin
  1 [dash gap dot gap dot gap] [halfdash] [halfdash]
  lineend
} def

% stroke a dotdotdotdashed line: <length> <dashlength> dotdotdotdashed -
/dotdotdotdashed
{
  linebegin
  1 [dash gap dot gap dot gap dot gap] [] [dash]
  lineend
} def

% stroke a dotdotdotcdashed line: <length> <dashlength> dotdotdotcdashed -
/dotdotdotcdashed
{
  linebegin
  1 [dash gap dot gap dot gap dot gap] [halfdash] [halfdash]
  lineend
} def


% stroke a y histogram: - yhisto -
/yhisto
{ xprev yleft trpoint yextra sub moveto
  xprev yprev trpoint lineto
  xcurr yprev trpoint lineto
  xcurr yleft trpoint yextra sub lineto 
  linewidth setlinewidth stroke
} def

% stroke an x histogram: - xhisto -
/xhisto
{ xleft yprev trpoint exch xextra sub exch moveto
  xcurr yprev trpoint lineto
  xcurr ycurr trpoint lineto
  xleft ycurr trpoint exch xextra sub exch lineto 
  linewidth setlinewidth stroke
} def

% stroke a surface y histogram: - surfaceyhisto -
/surfaceyhisto
{ firstpair
  { xprev yleft trpoint yextra sub moveto
    xprev yprev trpoint lineto
  }
  { xprev yprev trpoint moveto
  } ifelse
  xcurr yprev trpoint lineto
  lastpair
  { xcurr yleft trpoint yextra sub lineto 
  }
  { xcurr ycurr trpoint lineto
  } ifelse
  linewidth setlinewidth stroke
} def

% stroke a surface x histogram: - surfacexhisto -
/surfacexhisto
{ firstpair
  { xleft yprev trpoint exch xextra sub exch moveto
  }
  { xprev yprev trpoint moveto
  } ifelse
  xcurr yprev trpoint lineto
  xcurr ycurr trpoint lineto
  lastpair
  { xleft ycurr trpoint exch xextra sub exch lineto 
  } if
  linewidth setlinewidth stroke
} def

% % pre-texture versions
% % stroke a filled y histogram: - filledyhisto -
% /filledyhisto
% {
%   linewidth setlinewidth
%   xprev yleft trpoint exch currentlinewidth 2 div add exch yextra sub moveto
%   xprev yprev trpoint exch currentlinewidth 2 div add exch lineto
%   xcurr yprev trpoint exch currentlinewidth 2 div sub exch lineto
%   xcurr yleft trpoint exch currentlinewidth 2 div sub exch yextra sub lineto 
%   closepath fill
% } def

% % stroke a filled x histogram: - filledxhisto -
% /filledxhisto
% {
%   linewidth setlinewidth
%   xleft yprev trpoint currentlinewidth 2 div add exch xextra sub exch moveto
%   xcurr yprev trpoint currentlinewidth 2 div add lineto
%   xcurr ycurr trpoint currentlinewidth 2 div sub lineto
%   xleft ycurr trpoint currentlinewidth 2 div sub exch xextra sub exch lineto 
%   closepath fill
% } def

% stroke a filled y histogram: - filledyhisto -
/filledyhisto
{
  linewidth setlinewidth
  xprev yleft trpoint exch currentlinewidth 1.3 mul add exch yextra sub moveto
  xprev yprev trpoint exch currentlinewidth 1.3 mul add exch lineto
  xcurr yprev trpoint exch currentlinewidth 1.3 mul sub exch lineto
  xcurr yleft trpoint exch currentlinewidth 1.3 mul sub exch yextra sub lineto 
  gsave texture fill grestore stroke
} def

% stroke a filled x histogram: - filledxhisto -
/filledxhisto
{
  linewidth setlinewidth
  xleft yprev trpoint currentlinewidth 1.3 mul add exch xextra sub exch moveto
  xcurr yprev trpoint currentlinewidth 1.3 mul add lineto
  xcurr ycurr trpoint currentlinewidth 1.3 mul sub lineto
  xleft ycurr trpoint currentlinewidth 1.3 mul sub exch xextra sub exch lineto 
  gsave texture fill grestore stroke
} def

% comb: show a comb tooth
% - comb -
/comb {
	/yorig yaxis false eq {ymin}{yaxis} ifelse def
	linewidth setlinewidth
	newpath
	xcurr yorig trpoint moveto xcurr ycurr trpoint lineto stroke
} def


% docross: show a cross with a given symbolsize and symbollinewidth
% <x> <y> <symbolsize> <symbollinewidth> docross -
/docross
{
  setlinewidth
  /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul ss 2 mul rlineto
  0 ss -2 mul rmoveto
  ss -2 mul ss 2 mul rlineto
  [] 0 setdash 0 setlinecap stroke
} def

% cross: show a cross
% - cross -
/cross { xcurr ycurr trpoint symbolsize symbollinewidth docross } def

% doplus: show a plus with a given symbolsize and symbollinewidth
% <x> <y> <symbolsize> <symbollinewidth> doplus -
/doplus
{
  setlinewidth
  /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss 2 mul 0 rlineto
  ss neg ss neg rmoveto
  0 ss 2 mul rlineto
  [] 0 setdash 0 setlinecap stroke
} def

% plus: show a plus
% - plus -
/plus { xcurr ycurr trpoint symbolsize symbollinewidth doplus } def

% dosquare: show an open square with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dosquare -
/dosquare
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul 0 rlineto
  0 ss 2 mul rlineto
  ss -2 mul 0 rlineto
  closepath [] 0 setdash stroke
} def

% square: show an open square
% - square -
/square { xcurr ycurr trpoint symbolsize symbollinewidth dosquare } def

% dofilledsquare: show filled square with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledsquare -
/dofilledsquare
{
  pop /ss exch def
  newpath
  moveto
  ss neg ss neg rmoveto
  ss 2 mul 0 rlineto
  0 ss 2 mul rlineto
  ss -2 mul 0 rlineto
  closepath fill
} def

% filledsquare: show a filled square
% - filledsquare -
/filledsquare { xcurr ycurr trpoint symbolsize symbollinewidth dofilledsquare } def

% dodiamond: show an open diamond with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dodiamond -
/dodiamond
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss ss neg rlineto
  ss ss rlineto
  ss neg ss rlineto
  closepath [] 0 setdash stroke
} def

% diamond: show an open diamond
% - diamond -
/diamond { xcurr ycurr trpoint symbolsize symbollinewidth dodiamond } def

% dofilleddiamond: show filled diamond with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilleddiamond -
/dofilleddiamond
{
  pop /ss exch def
  newpath
  moveto
  ss neg 0 rmoveto
  ss ss neg rlineto
  ss ss rlineto
  ss neg ss rlineto
  closepath fill
} def

% filleddiamond: show a filled diamond
% - filleddiamond -
/filleddiamond { xcurr ycurr trpoint symbolsize symbollinewidth dofilleddiamond } def

% docircle: show an open circle with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> docircle -
/docircle
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  ss 0 360 arc [] 0 setdash stroke
} def

% circle: show an open circle
% - circle -
/circle { xcurr ycurr trpoint symbolsize symbollinewidth docircle } def

% dofilledcircle: show filled circle with given symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledcircle -
/dofilledcircle
{
  pop /ss exch def
  newpath
  ss 0 360 arc fill
} def

% filledcircle: show a filled circle
% - filledcircle -
/filledcircle { xcurr ycurr trpoint symbolsize symbollinewidth dofilledcircle } def

% dotriangle: show an open triangle with a given symbolsize and symbollinewidth
% NB symbolsize is reduced by half the line width to get size exactly right
% <x> <y> <symbolsize> <symbollinewidth> dotriangle -
/dotriangle
{
  dup setlinewidth
  0.5 mul sub 0 max /ss exch def
  newpath
  moveto
  0 ss 1.5 mul rmoveto
  ss neg ss -2.5 mul rlineto
  ss 2 mul 0 rlineto
  closepath [] 0 setdash stroke
} def

% triangle: show an open triangle
% - triangle -
/triangle { xcurr ycurr trpoint symbolsize symbollinewidth dotriangle } def

% dofilledtriangle: show filled triangle with symbolsize and symbollinewidth
% NB symbollinewidth is not used
% <x> <y> <symbolsize> <symbollinewidth> dofilledtriangle -
/dofilledtriangle
{
  pop /ss exch def
  newpath
  moveto
  0 ss 1.5 mul rmoveto
  ss neg ss -2.5 mul rlineto
  ss 2 mul 0 rlineto
  closepath fill
} def

% filledtriangle: show a filled triangle
% - filledtriangle -
/filledtriangle { xcurr ycurr trpoint symbolsize symbollinewidth dofilledtriangle } def


%plog: like log only with a base, and protected from failing if <= 0
% base x plog res
/plog { dup 0 le { pop pop 0 } { ln exch ln div } ifelse } def

% xtr: transform one x value logarithmically if xlog > 1
% <num> xtr <num>
/xtr
{ xlog 1 gt
  { xlog exch plog
  } if
} def

% ytr: transform one y value logarithmically if ylog > 1
% <num> ytr <num>
/ytr
{ ylog 1 gt
  { ylog exch plog
  } if
} def


% trpoint: transform (x, y) in graph space into (x', y') in print space
% x y trpoint x' y'
/trpoint
{ exch xtr xdecr { trxmax exch sub } { trxmin sub } ifelse
  trxmax trxmin sub div xwidth mul xextra add

  exch ytr ydecr { trymax exch sub } { trymin sub } ifelse
  trymax trymin sub div ywidth mul yextra add
} def


% yonly: interpolate x values 1, 2, ... into data
% [ data ] yonly [ newdata ]
/yonly
{ dup /tmp exch def
  length [ exch 1 exch 1 exch
  { dup tmp exch 1 sub get
  } for
  ]
} def

% xonly: interpolate y values 1, 2, ... into data
% [ data ] yonly [ newdata ]
/xonly
{ dup /tmp exch def
  length [ exch 1 exch 1 exch
  { dup tmp exch 1 sub get exch
  } for
  ]
} def

% xandy: no interpolation of x or y values
% [ data ] xandy [ data ]
/xandy {} def

% swapxandy: swap x and y values
% [ data ] swapxandy [ data ]
/swapxandy
{ dup /tmp exch def
  length [ exch 2 exch 2 exch
  { dup tmp exch 1 sub get exch 2 sub tmp exch get
  } for
  ]
} def


% expstringwidth: calculate width of string containing optional exponent
% <string> expstringwidth <width>
/expstringwidth
{ (^) search
  { exch pop stringwidth pop exch stringwidth pop 0.7 mul add }
  { stringwidth pop }
  ifelse
} def

% expstringshow: show string containing optional exponent
% <string> expstringshow -
/expstringshow
{ (^) search
  { exch pop show 0 0.5 ft rmoveto
    gsave currentfont 0.7 scalefont setfont show grestore
  }
  { show
  }
  ifelse
} def

% concatenate two strings: <string> <string> strconcat <string>
/strconcat
{ 2 copy length exch length add string
  dup 0 4 index putinterval
  dup 3 index length 3 index putinterval
  3 1 roll pop pop
} def

/offs 0 def
/prtn
{ gsave
  dup 0 offs moveto 20 string cvs show
  /offs offs 10 pt add def
  grestore
} def

/prts
{ gsave
  dup 0 offs moveto 20 show
  /offs offs 10 pt add def
  grestore
} def

% lgen: generate one label automatically
% num lgen num string
/lgen { dup 20 string cvs } def

% loglgen: generate one logarithmic label (with exponent)
% <base> <exponent> loglgen <string>
/loglgen
{ 20 string cvs exch 20 string cvs
  (^) strconcat exch strconcat
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% printxsubgrid: print one x tick without a label
% xpos printxsubgrid -
/printxsubgrid
{
  xgrid {dup gsave 0.6 setgray 0.2 pt setlinewidth
    newpath
    yleft trpoint moveto 0 yextra neg rmoveto
    yright trpoint lineto 0 yextra rlineto stroke grestore
  }
  {pop} ifelse
} def

% printxgrid: print one x label
% (xlabel) xpos printxgrid -
/printxgrid
{ xgrid {dup gsave 0.6 setgray newpath
  yleft trpoint moveto 0 yextra neg rmoveto
  yright trpoint lineto 0 yextra rlineto stroke grestore pop}
  {pop pop} ifelse
} def

% printysubgrid: print one y tick
% ypos printysubgrid -
/printysubgrid
{
  ygrid {dup gsave 0.6 setgray 0.2 pt setlinewidth newpath
    xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke
    grestore
  } 
  {pop} ifelse
} def

% printygrid: print one y label
% (ylabel) ypos printygrid -
/printygrid
{ ygrid {dup gsave 0.6 setgray newpath
    xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke
    grestore pop
  }
  {pop pop} ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% printxsubtick: print one x tick without a label
% xpos printxsubtick -
/printxsubtick
{
  xgrid {dup dup gsave 0.6 setgray 0.2 pt setlinewidth
    newpath yleft trpoint moveto 0 yextra neg rmoveto
    yright trpoint lineto 0 yextra rlineto stroke grestore
  } if
  newpath yleft trpoint moveto 0 yextra neg rmoveto
  0 xticklength 2 div neg rlineto [] 0 setdash stroke
} def

% printxlabel: print one x label
% (xlabel) xpos printxlabel -
/printxlabel
{ xgrid {dup dup gsave 0.6 setgray
    newpath yleft trpoint moveto 0 yextra neg rmoveto
    yright trpoint lineto 0 yextra rlineto stroke grestore
  } if
  newpath yleft trpoint moveto 0 yextra neg rmoveto
  0 xticklength neg rlineto 0 gsave stroke grestore 0.9 ft neg rmoveto
  xlabel {
    xlog 1 gt { 0 0.3 ft neg rmoveto } if
    dup expstringwidth -2 div 0 rmoveto expstringshow
  } {pop} ifelse
} def

% printysubtick: print one y tick
% ypos printysubtick -
/printysubtick
{
  ygrid {dup dup gsave 0.6 setgray 0.2 pt setlinewidth
    newpath xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke grestore
  } if
  newpath xleft exch trpoint moveto xextra neg 0 rmoveto
  yticklength 2 div neg 0 rlineto [] 0 setdash stroke
} def

% printylabel: print one y label
% (ylabel) ypos printylabel -
/printylabel
{ ygrid {dup dup gsave 0.6 setgray
    newpath xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke grestore
  } if
  newpath xleft exch trpoint moveto xextra neg 0 rmoveto
  yticklength neg 0 rlineto gsave stroke grestore
  ylabel {
    -0.3 ft -0.3 ft rmoveto
    dup expstringwidth neg 0 rmoveto expstringshow
  } {pop} ifelse
} def

% printrsubtick: print one r tick
% ypos printrsubtick -
/printrsubtick
{ newpath
  xright exch trpoint moveto xextra 0 rmoveto
  rticklength 2 div 0 rlineto [] 0 setdash stroke
} def

% printrlabel: print one r label
% (rlabel) ypos printrlabel -
/printrlabel
{ xright exch trpoint moveto xextra 0 rmoveto
  rticklength 0 rlineto gsave stroke grestore
  ylabel {
    0.3 ft -0.3 ft rmoveto expstringshow
  } {pop} ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% printxaxistick: print one x axis tick
% xpos printxaxistick -
/printxaxissubtick
{ xgrid
  { dup dup gsave 0.6 setgray 0.2 pt setlinewidth newpath
    yleft trpoint moveto 0 yextra neg rmoveto
    yright trpoint lineto 0 yextra rlineto stroke grestore
  } if
  newpath
  yaxis trpoint moveto 0 xticklength -4 div rmoveto
  0 xticklength 2 div rlineto [] 0 setdash stroke
} def

% printxaxislabel: print one x axis label
% (xlabel) xpos printxaxislabel -
/printxaxislabel
{ xgrid
  { dup dup gsave 0.6 setgray newpath
    yleft trpoint moveto 0 yextra neg rmoveto
    yright trpoint lineto 0 yextra rlineto stroke grestore
  } if
  dup
  newpath
  yaxis trpoint moveto
  0 xticklength -2 div rmoveto gsave 0 xticklength rlineto stroke grestore 0 0.9 ft neg rmoveto
  xlabel {
    xaxis eq yaxis dup yleft ne exch yright ne and and {pop}{
      yaxis yright ne
      { xlog 1 gt { 0 0.3 ft neg rmoveto } if
        dup expstringwidth -2 div 0 rmoveto expstringshow
      }
      { xlog 1 gt { 0 0.2 ft rmoveto } if
        dup expstringwidth -2 div 1.6 ft rmoveto expstringshow
      } ifelse
    } ifelse
  }
  { pop pop
  } ifelse
} def

% printyaxissubtick: print one y axis subtick
% ypos printyaxissubtick -
/printyaxissubtick
{ ygrid
  {dup dup gsave 0.6 setgray 0.2 pt setlinewidth
    newpath
    xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke grestore
  } if
  newpath xaxis exch trpoint moveto
  yticklength -4 div 0 rmoveto
  yticklength 2 div 0 rlineto [] 0 setdash stroke
} def

% printyaxislabel: print one y axis label
% (ylabel) ypos printyaxislabel -
/printyaxislabel
{ ygrid {dup dup gsave 0.6 setgray
    newpath
    xleft exch trpoint moveto xextra neg 0 rmoveto
    xright exch trpoint lineto xextra 0 rlineto stroke grestore
  } if
  dup newpath
  xaxis exch trpoint moveto
  yticklength -2 div 0 rmoveto gsave yticklength 0 rlineto stroke grestore -0.3 ft -0.3 ft rmoveto
  ylabel {
    yaxis eq xleft xaxis ne and {pop}{dup expstringwidth neg 0 rmoveto expstringshow} ifelse
  } {pop pop} ifelse
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% printticks: print ticks and labels
% /tickproc /labelproc [ tickandlabeldata ] min printticks -
/printticks
{ pop
  /tickstate 0 def
  { tickstate 0 eq
    { 
      /tickstate 1 def
    }
    { dup type /stringtype eq
      {
        exch 2 index cvx exec
        /tickstate 0 def
      }
      {
        exch 3 index cvx exec
      } ifelse
    } ifelse
  } forall
  pop pop
} def

% printticks: print ticks and labels
% /tickproc /labelproc [ tickandlabeldata ] min printticks -
/__printticks
{ /prev exch def
  /tickstate 0 def
       (printxticks-1) 10 lgraphdebugprint
  { tickstate prtn 0 eq
    { 
(printxticks0) 10 lgraphdebugprint
      /tickstate 1 def
    }
    { dup type prtn /stringtype eq
      {
        exch prtn 2 index cvx exec
        /tickstate 0 def
      }
      {
%       (printxticks1) 10 lgraphdebugprint
        exch prtn 3 index (printxticks1) 10 lgraphdebugprint prtn cvx exec
%        /prev exch def
      } ifelse
    } ifelse
  } forall
  pop pop
} def

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% <val> minmax -
% perform minv := min(minv, val); maxv := max(maxv, val)
% allowing for the possibility of minv, maxv, val being false (undefined)
/minmax
{ dup false eq
  { pop }
  { minv false eq
    { dup /minv exch def /maxv exch def }
    { dup minv lt
      { /minv exch def }
      { dup maxv gt
        { /maxv exch def }
        { pop }
        ifelse
      } ifelse
    } ifelse
  } ifelse
} def

% <ticks> ticksundef <ticks> <bool>
% returns true iff the ticks array is undefined (one false entry)
/ticksundef
{ dup length 1 eq
  { dup 0 get false eq
  }
  { false }
  ifelse
} def

% <number> integral <boolean>
% true if the number has an integral value
/integral { dup round eq } def

% subticksep ticksep ticks xory alldata minval maxval axis base ticksandlimits ticks min max base
% ticksandlimits: sort out value of x or y ticks and limits and log base
/ticksandlimits
{ /base exch def
  /minv false def
  /maxv false def

  % min and max of user-supplied minval, maxval, and axis
  minmax minmax minmax

  % min and max of data points
  { 0 get dup dup length 1 sub 3 index exch 2 exch
    { get minmax dup
    } for pop pop
  } forall
  pop dup

  % min and max of tick values
  { dup type /stringtype eq
    { pop } { minmax } ifelse
  } forall

  % fix minv and maxv if undefined (false) or equal
  minv false eq
  { /minv -1 def /maxv 1 def }
  { minv maxv eq
    { minv 0 lt
      { /minv 2 minv mul def /maxv 0 def
      }
      { minv 0 eq
        { /minv -1 def /maxv 1 def
        }
        { /minv 0 def /maxv 2 maxv mul def
        } ifelse
      } ifelse
    } if
  } ifelse

  % invent ticks if undefined
  ticksundef
  { pop /ticksep exch def /nsubtick exch def

    % if base is reasonable and minv is positive, logarithmic ticks
    base 1 gt minv 0 gt and
    {
      % get integral log of minv and maxv
      /logminv base minv plog floor   cvi def
      /logmaxv base maxv plog ceiling cvi def

      % if minv close to base, make it 1; reset minv and maxv
      logminv 1 eq logmaxv 4 ge and { /logminv 0 def } if
      /minv base logminv exp def
      /maxv base logmaxv exp def

      % ticks := [ base**logminv, ... , base**logmaxv ]
      [ logminv 1 logmaxv 1 sub
        { dup base exch exp dup /dec exch def
          exch base exch loglgen
          2 1 9 {
            dec mul
          } for
        } for
        logmaxv dup base exch exp
        exch base exch loglgen
      ]
    }
    { % non-logarithmic ticks
      {
        % fix tick separation if undefined (0) or too small
        /base 0 def
        /delta maxv minv sub def
        ticksep delta 30 div le
        { /ticksep 10 delta log 1 sub ceiling exp def
          ticksep delta 2 div ge
          { /ticksep ticksep 2 div def }
          { ticksep delta 5 div lt
            { /ticksep 2 ticksep mul def
            } if
          } ifelse
        } if

        % adjust minv and maxv to be multiples of ticksep
        /minv minv ticksep div floor   ticksep mul def
        /maxv maxv ticksep div ceiling ticksep mul def
        /delta maxv minv sub def

        % if minv or maxv near zero, move to zero and redo
        minv ticksep eq
        { /minv 0 def }
        { maxv ticksep neg eq { /maxv 0 def } { exit } ifelse
        } ifelse
      } loop

      % if minv, maxv, and ticksep are all integral, set "makeint" to true
      /makeint minv integral maxv integral ticksep integral and and def

      % if nsubtick is defined (!= 0 or 1), add subticks
      nsubtick 1 gt {
        /ticksep ticksep nsubtick div def
        % ticks := [ minv, minv+ticksep, ... , maxv ]
        [ 0 1 delta ticksep div round
          { dup ticksep mul minv add
            exch nsubtick mod 0 eq { makeint { cvi } if lgen } if
          }
          for
        ]
      }
      {
        % ticks := [ minv, minv+ticksep, ... , maxv ]
        [ 0 1 delta ticksep div round
          { ticksep mul minv add makeint { cvi } if lgen }
          for
        ]
      } ifelse
    } ifelse
  }
  { exch pop exch pop
  } ifelse
  minv maxv base
} def

% xset: set up all data for x axis, including limits and ticks
% xticksep xticks 0 alldata xmin xmax xlog xgrid xextra xdecr xaxis xticklength xset -
/xset
{ /xticklength exch def
  /xaxis exch def
  /xdecr exch def
  /xextra exch def
  /xgrid exch def
  /xlabel exch def
  xaxis exch ticksandlimits
  /xlog exch def /xmax exch def /xmin exch def /xticks exch def
  /xleft xdecr { xmax } { xmin } ifelse def
  /xright xdecr { xmin } { xmax } ifelse def
  /xwidth xsize xextra 2 mul sub def
  /trxmin xmin xtr def /trxmax xmax xtr def
} def

% yset: set up all data for y axis, including limits and yticks
% yticksep yticks 0 alldata ymin ymax ylog ygrid yextra ydecr yaxis yticklength yset -
/yset
{ /yticklength exch def
  /yaxis exch def
  /ydecr exch def
  /yextra exch def
  /ygrid exch def
  /ylabel exch def
  yaxis exch ticksandlimits
  /ylog exch def /ymax exch def /ymin exch def /yticks exch def
  /yleft ydecr { ymax } { ymin } ifelse def
  /yright ydecr { ymin } { ymax } ifelse def
  /ywidth ysize yextra 2 mul sub def
  /trymin ymin ytr def /trymax ymax ytr def
} def

% rset: set up all data for y axis (again), but including limits and rticks
% rticksep rticks 0 alldata ymin ymax ylog yextra ydecr yaxis rticklength rset -
/rset
{ /rticklength exch def
  /yaxis exch def
  /ydecr exch def
  /yextra exch def
  yaxis exch ticksandlimits
  /ylog exch def /ymax exch def /ymin exch def /rticks exch def
  /yleft ydecr { ymax } { ymin } ifelse def
  /yright ydecr { ymin } { ymax } ifelse def
  /ywidth ysize yextra 2 mul sub def
  /trymin ymin ytr def /trymax ymax ytr def
} def

% norset: set up data for no rticks
% - norset -
/norset
{ /rticklength 0 def
  /rticks [] def
} def

% drawframe: print a frame around the graph
/drawframe
{ 0 0 moveto xsize 0 lineto xsize ysize lineto
  0 ysize lineto closepath stroke
} def

% framestyle: print label and ticks, subticks (without label)
%   around the graph, and an optional grid
/framestyle
{
  /printxsubtick /printxlabel xticks xleft printticks
  /printysubtick /printylabel yticks ymin printticks
  /printrsubtick /printrlabel rticks ymin printticks
} def

% gridstyle: print a frame around the graph, plus a grid
/gridstyle
{
  /printxsubtick /printxlabel xticks xleft printticks
  /printysubtick /printylabel yticks ymin printticks
  /printrsubtick /printrlabel rticks ymin printticks
} def

% nonestyle: print nothing but an optional grid
/nonestyle
{
  /printxsubgrid /printxgrid xticks xleft printticks
  /printysubgrid /printygrid yticks ymin printticks
} def

% axesstyle: print axes for the graph (unless axis values missing)
/axesstyle
{
  xaxis false eq yaxis false eq or
  { framestyle }
  {
    /printxaxissubtick /printxaxislabel xticks xleft printticks
    /printyaxissubtick /printyaxislabel yticks ymin printticks
    xaxis yaxis trpoint dup 0 exch moveto xsize exch lineto
    dup 0 moveto ysize lineto stroke
  } ifelse
} def

% rundata: run all data sets
/rundata
{ alldata
  { gsave
    dup dup dup dup dup
    5 get /texture exch def
    4 get /dopaint exch def
    3 get /initrun exch def
    2 get /pairs exch def
    1 get /points exch def
    0 get /data exch def
    dopaint
    { data length 4 ge
      {
        gsave
        initrun
        /yorig yaxis false eq {ymin}{yaxis} ifelse def
        newpath
        data 0 get yorig trpoint moveto
        0 2 data length 2 sub
        { dup 1 add
          data exch get /ycurr exch def
          data exch get /xcurr exch def
          xcurr ycurr trpoint lineto
        } for
        data dup length 2 sub get yorig trpoint lineto
        closepath texture fill
        grestore
      } if
    } if
    initrun
    data length 2 ge
    {
      /xcurr data 0 get def
      /ycurr data 1 get def
      points
      data length 4 ge
      { 2 2 data length 2 sub
        { /xprev xcurr def
          /yprev ycurr def
          dup dup 2 eq /firstpair exch def
          data length 2 sub eq /lastpair exch def
          dup 1 add
          data exch get /ycurr exch def
          data exch get /xcurr exch def
          pairs
          points
        } for
      } if
    } if
    grestore
  } forall
  /offs 0 def
} def

end
%%EndResource

%%BeginResource: procset LoutBasicSetup
% @PrependGraphic file /usr/local/lib/lout/include/bsf.lpg
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                    %
%  PostScript @SysPrependGraphic file for @BasicSetup                %
%                                                                    %
%  This file has been placed in the public domain by its author,     %
%  Jeffrey H. Kingston                                               %
%                                                                    %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% width height linethickness louteuro -
% draw a Euro symbol of this width and height with this line thickness
/louteuro {
  20 dict begin
    /eurothick exch def
    /euroheight exch def
    /eurowidth exch def
    /eurostrokewidth euroheight 0.8 mul def
    /eurostep eurothick 60 cos mul 60 sin div def
    /eurotheta 40 def

    % llx lly width thickness louteurobox -
    % draw angled box starting at (llx, lly) with given width and thickness
    /louteurobox
    {
      /euroboxthick exch def
      /euroboxwidth exch def
      newpath moveto euroboxwidth 0 rlineto
      eurostep euroboxthick rlineto
      euroboxwidth neg 0 rlineto closepath fill
    } def

    % lower cross stroke
    0 euroheight 2 div eurothick 1.5 mul sub
    eurostrokewidth eurothick louteurobox

    % upper cross stroke
    0 euroheight 2 div eurothick 0.5 mul add
    eurostrokewidth eurostep 2 mul add eurothick louteurobox

    % circular part
    /eurohctr eurowidth euroheight 2 div eurotheta cos mul sub def
    /eurovctr euroheight 2 div def
    newpath
    eurohctr eurovctr eurovctr eurotheta 350 eurotheta sub arc
    eurohctr eurovctr eurovctr eurothick sub 365 eurotheta sub eurotheta arcn
    closepath fill
  end
} def

% path for @FullWidthRule symbol
/LoutRule
{ 0 0 moveto xsize 0 lineto
} def

% path for @Box symbol
/LoutBox
{ 0 0 moveto xsize 0 lineto
  xsize ysize lineto 0 ysize lineto
  closepath
} def

% path for @CurveBox symbol
/LoutCurveBox
{ xmark 0 moveto
  xsize xmark sub xmark xmark 270 360 arc
  xsize xmark sub ysize xmark sub xmark 0 90 arc
  xmark ysize xmark sub xmark 90 180 arc
  xmark xmark xmark 180 270 arc
  closepath
} def

% path for @ShadowBox symbol
/LoutShadowBox
{ xmark 2 mul 0 moveto xsize 0 lineto
  xsize ysize xmark 2 mul sub lineto
  xsize xmark sub ysize xmark 2 mul sub lineto
  xsize xmark sub xmark lineto
  xmark 2 mul xmark lineto
  closepath
} def

% set up dictionary containing margin note data: parity LoutMargSet -
/LoutMargSet
{ /LoutMargDict 12 dict def
  LoutMargDict begin
    /parity exch def
    /matr matrix currentmatrix def
    /rightx xsize def
    /lefty ysize def   % highest allowable point for top of next left note
    /righty ysize def  % highest allowable point for top of next right note
    /max { 2 copy gt { pop } { exch pop } ifelse } def
    /min { 2 copy lt { pop } { exch pop } ifelse } def
  end
} def

%translate coordinate system for marginal notes:  type LoutMargShift -
% where type 0 is left margin, 1 is right margin, 2 is outer, 3 is inner
/LoutMargShift
{ LoutMargDict begin

    % y coordinate of top of note, in margin coords, before vertical adjust
    0 ysize transform matr itransform exch pop

    % decide whether left or right margin based on type and parity
    exch [ 0 1 parity 1 parity sub ] exch get 0 eq
    {
      % left margin: adjust top of note downwards if overlaps previous note
      lefty min

      % bottom of note is new lefty position and also translate position
      ysize sub dup /lefty exch def

      % want right edge of note at coordinate zero
      xsize neg exch
    }
    {
      % right margin: adjust top of note downwards if overlaps previous note
      righty min

      % bottom of note is new righty position and also translate position
      ysize sub dup /righty exch def

      % want left edge of note at coordinate rightx
      rightx exch
    } ifelse

    % stack now contains coord of bottom left corner in margin coordinates
    matr setmatrix translate
  end
} def

% create LoutPageDict with left, right, foot, top for @Place symbol users
/LoutPageSet
{
  /LoutPageDict 5 dict def
  LoutPageDict begin
    /matr matrix currentmatrix def
    /left 0 def
    /right xsize def
    /foot 0 def
    /top ysize def
  end

} def

%%EndResource

%%EndProlog

%%BeginSetup
%%BeginResource: encoding vec2
/vec2 [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
/parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/quoteleft /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/quotesinglbase /quotedblbase /ellipsis /OE /oe /quotedblleft /quotedblright /fi
/fl /endash /emdash /bullet /dagger /daggerdbl /florin /fraction
/dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis /.notdef /ring /cedilla /.notdef /hungarumlaut /ogonek /caron
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis
] def
%%EndResource

/pdfmark where {pop} {userdict /pdfmark /cleartomark load put} ifelse
%%EndSetup

%%Page: 1 1
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
%%+ font Courier
%%+ font Times-Italic
%%+ font Symbol
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Courier
/Courierfnt3 vec2 /Courier LoutRecode
/fnt3 { /Courierfnt3 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
%%IncludeResource: font Symbol
/fnt4 { /Symbol LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup

gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
gsave
1417 -1417 translate
0.0 0.0 0.0 LoutSetRGBColor
9066 0 0 0 200 240 50 LoutGraphic
gsave
1 LoutMargSet
grestore

grestore
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor 9066 14006 0 14006 200 240 50 LoutGraphic
gsave
1 LoutMargSet
grestore
9066 10 0 10 200 240 50 0 13996 LoutGr2
LoutRule stroke
grestore

grestore
200 fnt2 1558 13618(Lout)m 2018(Graph)s 2629(samples)s
3348(\(modi\207ed)s 4202(@Graph)s 4999(\211)s 5549(22)s 5795(A)s 10(ugust,)k
6489(2019)s 6934(\211)s 7084(E.B.\))s gsave
0 13327 translate
200 fnt1 9066 10 0 10 200 240 50 LoutGraphic
gsave
LoutRule stroke
grestore

grestore
0 12949(T)m 3(icks,)k
556(labels)s 1087(and)s 1455(grid)s 180 fnt3 0 12645(@Graph)m
0 12405(  style{axes} width{6c} height{7c})m 0 12165(  grid{no} label{yes}        # default values)m 0 11925(  xorigin{0.0} yorigin{0.0})m 0 11685(  xticksep{2} xnsubtick{2}   # xticks{-2@ -1 0@ 1 2 \(\) 3 4@ 5 6@})m 0 11445(  yticksep{4} ynsubtick{2})m
0 11205({)m 0 10965(  @Data pairs{dotted} linewidth{0.5p} { 0 -1 2 -1 2 0 })m 0 10725(  @Data color{red} pairs{solid} linewidth{1p} {)m 0 10485(    xloop from {-2} to {6} by { 0.1 } do {)m 0 10245(      x {{x - 2} * {x - 2} - 1})m
0 10005(    })m 0 9765(  })m 0 9525(  @Data color{blue} points{filledcircle} symbolsize{0.3f} { 2 -1 })m 0 9285(})m 200 fnt1
0 8966(The)m 356(abo)s 3(v)k 3(e)k 872(code)s
1294(doesn')s 3(t)k 1927(sho)s 5(w)k 2388(math)s
2834(objects)s 3439(appearing)s 4268(on)s 4515(the)s 4804(graph,)s
5347(b)s 4(ut)k 5648(the)s 5937(source)s 6502(does.)s
3402 3969 0 3969 200 240 50 567 4730 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 -1 2 -1 2 0 ] xandy
{  }
{ linesetup dotted }
{ /dashlength 0.2 ft def
	 /linewidth 0.5 pt def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -2 0.1 6 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 2 -1 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true false 0 false 0.0 0.5 ft xset
2 4 [ false ] 1 alldata false false 0
true false 0 false 0.0 0.5 ft yset
norset
axesstyle
rundata 
grestore
288 290 0 290 200 240 50 0 -290 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 102(x)m grestore
grestore
1457 416 0 416 200 240 50 0 -416 LoutGr2
0 16 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 100 141(y)m 200 fnt4
245 135(=)m 200 fnt5 412 141(a)m 140 fnt4 606 220(2)m
200 fnt5 518 141(x)m 200 fnt4 721 135(+)m 200 fnt5
876 141(b)m 981(x)s 200 fnt4 1117 135(+)m 200 fnt5
1272 141(c)m grestore
grestore
373 394 0 394 200 240 50 0 -394 LoutGr2
2 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 60 174(-)m 140 fnt5 209 240(b)m
gsave
172 218 translate
200 fnt5 141 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 172 95(2)m 140 fnt5 246 100(a)m
grestore
grestore
741 525 0 525 200 240 50 0 -525 LoutGr2
0 -1 trpoint translate xsize	neg	ysize 2	div translate gsave
grestore
200 fnt5 100 214(-)m 112 fnt4 279 349(2)m 140 fnt5
212 283(b)m 140 fnt4 346 278(-)m 434(4)s 140 fnt5
507 283(a)m 581(c)s gsave
212 258 translate
200 fnt5 429 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 356 135(4)m
140 fnt5 429 140(a)m grestore
grestore
end

grestore
3402 3969 0 3969 200 240 50 5103 4730 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 -1 2 -1 2 0 ] xandy
{  }
{ linesetup dotted }
{ /dashlength 0.2 ft def
	 /linewidth 0.5 pt def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -2 0.1 6 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 2 -1 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true true 0 false 0.0 0.5 ft xset
2 4 [ false ] 1 alldata false false 0
true true 0 false 0.0 0.5 ft yset
norset
axesstyle
rundata 
grestore
288 290 0 290 200 240 50 0 -290 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 102(x)m grestore
grestore
1457 416 0 416 200 240 50 0 -416 LoutGr2
0 16 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5
100 141(y)m 200 fnt4 245 135(=)m 200 fnt5 412 141(a)m
140 fnt4 606 220(2)m 200 fnt5 518 141(x)m 200 fnt4
721 135(+)m 200 fnt5 876 141(b)m 981(x)s 200 fnt4
1117 135(+)m 200 fnt5 1272 141(c)m grestore
grestore
373 394 0 394 200 240 50 0 -394 LoutGr2
2 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 60 174(-)m
140 fnt5 209 240(b)m gsave
172 218 translate
200 fnt5 141 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 172 95(2)m
140 fnt5 246 100(a)m grestore
grestore
741 525 0 525 200 240 50 0 -525 LoutGr2
0 -1 trpoint translate xsize	neg	ysize 2	div translate gsave
grestore
200 fnt5 100 214(-)m 112 fnt4
279 349(2)m 140 fnt5 212 283(b)m 140 fnt4 346 278(-)m
434(4)s 140 fnt5 507 283(a)m 581(c)s gsave
212 258 translate
200 fnt5
429 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 356 135(4)m 140 fnt5 429 140(a)m grestore
grestore
855 298 0 298 200 240 50 0 -298 LoutGr2
1 13 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5
60 101(grid{yes})m grestore
grestore
end

grestore
3402 3969 0 3969 200 240 50 567 390 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 -1 2 -1 2 -4 ] xandy
{  }
{ linesetup dotted }
{ /dashlength 0.2 ft def
	 /linewidth 0.5 pt def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -2 0.1 6 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 2 -1 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ -2 lgen -1 0 lgen 1 2 () 3 4 lgen 5 6 lgen ] 0 alldata false false 0
true false 0 false 0.0 0.5 ft xset
2 4 [ false ] 1 alldata false false 0
true false 0 false -4 0.5 ft yset
norset
axesstyle
rundata 
grestore
288 290 0 290 200 240 50 0 -290 LoutGr2
6 -4 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 102(x)m grestore
grestore
1457 416 0 416 200 240 50 0 -416 LoutGr2
0 16 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 100 141(y)m
200 fnt4 245 135(=)m 200 fnt5 412 141(a)m 140 fnt4
606 220(2)m 200 fnt5 518 141(x)m 200 fnt4 721 135(+)m
200 fnt5 876 141(b)m 981(x)s 200 fnt4 1117 135(+)m
200 fnt5 1272 141(c)m grestore
grestore
453 474 0 474 200 240 50 0 -474 LoutGr2
2 -4 trpoint translate xsize	neg	2 div 0 translate gsave
grestore
200 fnt5 100 214(-)m 140 fnt5
249 280(b)m gsave
212 258 translate
200 fnt5 141 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 212 135(2)m 140 fnt5
286 140(a)m grestore
grestore
741 525 0 525 200 240 50 0 -525 LoutGr2
0 -1 trpoint translate xsize	neg	ysize 2	div translate gsave
grestore
200 fnt5 100 214(-)m 112 fnt4 279 349(2)m
140 fnt5 212 283(b)m 140 fnt4 346 278(-)m 434(4)s
140 fnt5 507 283(a)m 581(c)s gsave
212 258 translate
200 fnt5 429 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4
356 135(4)m 140 fnt5 429 140(a)m grestore
grestore
1011 298 0 298 200 240 50 0 -298 LoutGr2
1 13 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 60 101(yorigin{-4})m
grestore
grestore
1782 297 0 297 200 240 50 0 -297 LoutGr2
1 12 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 60 101(uncommenting)m 1279(xtic)s 4(ks)k grestore
grestore
end

grestore
3402 3969 0 3969 200 240 50 5103 390 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 -1 2 -1 2 0 ] xandy
{  }
{ linesetup dotted }
{ /dashlength 0.2 ft def
	 /linewidth 0.5 pt def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -2 0.1 6 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 2 -1 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
false true 0 false 0.0 0.5 ft xset
2 4 [ false ] 1 alldata false false 0
false true 0 false 0.0 0.5 ft yset
norset
axesstyle
rundata 
grestore
288 290 0 290 200 240 50 0 -290 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5
100 102(x)m grestore
grestore
1457 416 0 416 200 240 50 0 -416 LoutGr2
0 16 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 100 141(y)m 200 fnt4 245 135(=)m
200 fnt5 412 141(a)m 140 fnt4 606 220(2)m 200 fnt5
518 141(x)m 200 fnt4 721 135(+)m 200 fnt5 876 141(b)m
981(x)s 200 fnt4 1117 135(+)m 200 fnt5 1272 141(c)m
grestore
grestore
373 394 0 394 200 240 50 0 -394 LoutGr2
2 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 60 174(-)m 140 fnt5 209 240(b)m gsave
172 218 translate
200 fnt5
141 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 172 95(2)m 140 fnt5 246 100(a)m grestore
grestore
741 525 0 525 200 240 50 0 -525 LoutGr2
0 -1 trpoint translate xsize	neg	ysize 2	div translate gsave
grestore
200 fnt5
100 214(-)m 112 fnt4 279 349(2)m 140 fnt5 212 283(b)m
140 fnt4 346 278(-)m 434(4)s 140 fnt5 507 283(a)m
581(c)s gsave
212 258 translate
200 fnt5 429 0 0 0 200 240 10 LoutGraphic
gsave
0 0 moveto xsize 0 lineto 0.05 ft setlinewidth stroke
grestore

grestore
140 fnt4 356 135(4)m 140 fnt5
429 140(a)m grestore
grestore
855 298 0 298 200 240 50 0 -298 LoutGr2
1 13 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 60 101(grid{yes})m grestore
grestore
868 292 0 292 200 240 50 0 -292 LoutGr2
1 12 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 60 95(label{no})m
grestore
grestore
end

grestore

grestore
gsave
1417 -15423 translate
0.0 0.0 0.0 LoutSetRGBColor 0 0 0 0 200 240 50 LoutGraphic
gsave
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 2 2
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Italic
%%+ font Courier
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
%%IncludeResource: font Courier
/Courierfnt3 vec2 /Courier LoutRecode
/fnt3 { /Courierfnt3 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5795 -1552(-)m 5902(2)s 6047(-)s 9066 13446 0 13354 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore
0 13309(T)m 7(icks)k
481(can)s 809(be)s 1047(de\207ned)s 1688(as)s 1900(usual)s
2370(with)s 200 fnt5 2777 13310(xmin)m 200 fnt1 3159 13309(,)m
200 fnt5 3252 13310(xmax)m 200 fnt1 3672 13309(,)m 200 fnt5
3766 13310(xtic)m 4(ksep)k 200 fnt1 4450 13309(or)m 4670(nothing)s
5329(for)s 5615(automatic)s 6448(ticks)s 6870(or)s 200 fnt5
7090 13310(xtic)m 4(ks)k 200 fnt1 7588 13309(for)m 7874(manual)s
8511(ticks.)s 8978(a)s 0 13069(T)m 7(ick)k 409(is)s
583(associated)s 1448(with)s 1850(a)s 1988(label)s 2420(displayed)s
3232(wth)s 3579(the)s 3868(tick.)s 400 12757(The)m 752(label)s
1180(is)s 1349(determined)s 2289(automatically)s 3412(according)s 4236(to)s
4431(the)s 4715(tick)s 5060(position)s 5745(on)s 5987(the)s
6272(axis.)s 6675(When)s 7193(de\207ning)s 7887(ticks)s 8299(manually)s 13(,)k
0 12517(for)m 282(e)s 3(xample)k 180 fnt3 400 12117(xticks{-2@ -1 0@ 1 2 \(data1\) 3 4@ 5 6@})m
200 fnt1 0 11722(`)m 180 fnt3 51 11729(-2@)m 200 fnt1
375 11722(')m 476(identi\207es)s 1256(the)s 1554(tick)s 1912(at)s
2114(position)s 200 fnt5 2812 11723(-2)m 200 fnt1 2969 11722(,)m
3067(the)s 180 fnt3 3365 11729(@)m 200 fnt1 3532 11722(indicating)m
4381(that)s 4737(the)s 5035(v)s 5(alue)k 5516(-2)s
5736(is)s 5919(to)s 6127(be)s 6370(displayed.)s 7229(`)s
180 fnt3 7280 11729(2)m 7505(\(data1\))s 200 fnt1 8261 11722(')m
8363(de\207nes)s 8978(a)s 0 11482(tick)m 349(at)s 542(position)s
200 fnt5 1231 11483(2)m 200 fnt1 1372 11482(and)m 1709(with)s
2111(label)s 200 fnt5 2543 11483(data1)m 200 fnt1 2980 11482(.)m
3067(Using)s 3587(`)s 180 fnt3 3638 11489(2)m 3854(\(\))s
200 fnt1 4070 11482(')m 4163(is)s 4337(a)s 4475(w)s 2(ay)k
4850(to)s 5049(display)s 5669(a)s 5807(tick)s 6156(without)s
6815(an)s 3(y)k 7145(label.)s 400 11170(`)m 180 fnt3
451 11177(-1)m 200 fnt1 667 11170(')m 781(de\207nes)s 1409(a)s
1569(subtick)s 2216(which)s 2773(appears)s 3444(smaller)s 4099(on)s
4368(the)s 4679(graph,)s 5244(and)s 5602(without)s 6283(an)s 3(y)k
6635(label.)s 7129(Subticks)s 7879(can)s 8224(be)s 8480(de\207ned)s
0 10930(automatically)m 1127(using)s 1603(the)s 200 fnt5 1892 10931(xnsubtic)m 4(k)k
200 fnt1 2692 10930(which)m 3227(sets)s 3566(ho)s 5(w)k
3950(man)s 3(y)k 4435(subranges)s 5273(w)s 2(ould)k
5819(there)s 6262(be)s 6496(between)s 7206(tw)s 2(o)k
7547(subsequent)s 8482(ticks.)s 400 10618(Finally)m 1035(a)s 200 fnt5
1199 10619(label)m 200 fnt1 1674 10618(option,)m 2299(with)s 2727(possible)s
3452(v)s 5(alues)k 200 fnt5 4023 10619(yes)m 200 fnt1
4272 10618(,)m 200 fnt5 4387 10619(no)m 200 fnt1 4581 10618(,)m
200 fnt5 4697 10619(x)m 200 fnt1 4861 10618(or)m 200 fnt5
5103 10619(y)m 200 fnt1 5188 10618(,)m 5304(controls)s 6013(globally)s
6737(if)s 6945(labels)s 7476(are)s 7790(displayed)s 8629(along)s
0 10378(the)m 289(axis.)s 0 9999(The)m 200 fnt5 345 10000(grid)m
200 fnt1 720 9999(option)m 1266(can)s 1577(tak)s 2(e)k
1941(one)s 2263(the)s 2541(follo)s 5(wing)k 3343(v)s 5(alues:)k
200 fnt5 3923 10000(yes)m 200 fnt1 4172 9999(,)m 200 fnt5
4249 10000(no)m 200 fnt1 4482 9999(\(the)m 4825(def)s 2(ault\),)k
200 fnt5 5519 10000(x)m 200 fnt1 5645 9999(or)m 200 fnt5
5850 10000(y)m 200 fnt1 5935 9999(.)m 6010(It)s 6170(uses)s
6542(the)s 6820(ticks)s 7225(and)s 7551(subticks)s 8233(de\207nitions)s
0 9759(allo)m 5(wing)k 736(to)s 935(ha)s 4(v)k 3(e)k
1350(a)s 1488(coarse)s 2041(and)s 2378(a)s 2516(thiner)s
3030(grid.)s 3438(Hence,)s 4035(the)s 4324(graph)s 180 fnt3
400 9364(@Graph)m 400 9124(  style{none} width{5c} height{3c} grid{yes})m 400 8884(  xmin{0} xmax{5} xticksep{1} xnsubtick{5})m 400 8644(  ymin{0} ymax{3} yticksep{1} ynsubtick{5})m 400 8404({)m
400 8164(})m 200 fnt1 400 7845(can)m 723(just)s 1060(display)s
1680(a)s 1818(5x3)s 2155(cm)s 2448(1)s 2577(cm-based)s
3388(grid)s 3758(with)s 4160(a)s 4298(2)s 4443(mm)s
4803(subgrid.)s 2835 1701 0 1701 200 240 50 5721 7775 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [  ] def
5 1 [ false ] 0 alldata 0 5 0
true true 0 false false 0.5 ft xset
5 1 [ false ] 1 alldata 0 3 0
true true 0 false false 0.5 ft yset
norset
nonestyle
rundata 
grestore
end

grestore
0 6838(Styles)m 528(supported)s 1363(are:)s 200 fnt5
1692 6839(fr)m 3(ame)k 200 fnt1 2147 6838(,)m 200 fnt5
2236 6839(axes)m 200 fnt1 2585 6838(,)m 200 fnt5 2674 6839(none)m
200 fnt1 3056 6838(,)m 200 fnt5 3144 6839(xygrid)m 200 fnt1
3657 6838(,)m 200 fnt5 3746 6839(xgrid)m 200 fnt1 4171 6838(,)m
200 fnt5 4260 6839(ygrid)m 200 fnt1 4685 6838(.)m 4771(Note)s
5204(that)s 5551(when)s 6030(the)s 200 fnt5 6319 6839(grid)m
200 fnt1 6705 6838(option)m 7262(is)s 7436(used,)s 7889(it)s
8049(bypassed)s 8827(the)s 0 6598(grid)m 370(styles.)s 909(It)s
1080(is)s 1254(w)s 2(orth)k 1765(to)s 1964(use)s
2275(the)s 200 fnt5 2564 6599(grid)m 200 fnt1 2951 6598(option)m
3508(instead)s 4120(of)s 4346(the)s 4635(grid)s 5005(styles.)s
0 6179(An)m 291(e)s 3(xample)k 1008(with)s 1410(a)s
1548(log)s 1847(scale,)s 2332(no)s 5(w)k 13(.)k
3969 2835 0 2835 200 240 50 567 3077 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 10 0.05 100 0.5 1000 0.05 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 10 0.0504408
10.2341 0.0516432
10.4737 0.0528753
10.7189 0.054138
10.9699 0.055432
11.2267 0.0567583
11.4895 0.0581177
11.7585 0.0595111
12.0338 0.0609395
12.3155 0.062404
12.6038 0.0639055
12.8989 0.0654451
13.2009 0.067024
13.5099 0.0686432
13.8262 0.070304
14.1499 0.0720076
14.4812 0.0737554
14.8202 0.0755486
15.1672 0.0773887
15.5223 0.0792771
15.8857 0.0812154
16.2576 0.0832051
16.6382 0.0852479
17.0277 0.0873456
17.4263 0.0894999
17.8343 0.0917128
18.2518 0.0939862
18.6791 0.0963222
19.1164 0.098723
19.564 0.101191
20.022 0.103728
20.4907 0.106338
20.9705 0.109022
21.4614 0.111783
21.9639 0.114625
22.4781 0.11755
23.0043 0.120563
23.5429 0.123665
24.094 0.126861
24.6581 0.130156
25.2354 0.133552
25.8262 0.137054
26.4308 0.140667
27.0496 0.144396
27.6829 0.148246
28.331 0.152222
28.9942 0.156331
29.673 0.160579
30.3677 0.164972
31.0787 0.169518
31.8063 0.174224
32.5509 0.1791
33.3129 0.184152
34.0929 0.189393
34.891 0.19483
35.7079 0.200476
36.5438 0.206343
37.3994 0.212443
38.2749 0.21879
39.171 0.2254
40.0881 0.232288
41.0266 0.239472
41.9871 0.246971
42.97 0.254807
43.976 0.263001
45.0056 0.271579
46.0592 0.280567
47.1375 0.289995
48.2411 0.299895
49.3705 0.310302
50.5263 0.321253
51.7092 0.332792
52.9198 0.344964
54.1587 0.357819
55.4266 0.371411
56.7243 0.385801
58.0523 0.401053
59.4113 0.417237
60.8022 0.434429
62.2257 0.452712
63.6825 0.47217
65.1734 0.492894
66.6992 0.514976
68.2607 0.538509
69.8588 0.563579
71.4943 0.590264
73.1681 0.618619
74.881 0.648668
76.6341 0.680384
78.4282 0.713664
80.2643 0.748304
82.1434 0.783958
84.0665 0.820103
86.0346 0.855997
88.0488 0.890659
90.1102 0.922869
92.2198 0.95122
94.3788 0.974225
96.5883 0.990494
98.8496 0.998931
101.164 0.998931
103.532 0.990494
105.956 0.974225
108.437 0.95122
110.975 0.922869
113.573 0.890659
116.232 0.855997
118.953 0.820103
121.738 0.783958
124.588 0.748304
127.505 0.713664
130.49 0.680384
133.545 0.648668
136.672 0.618619
139.871 0.590264
143.146 0.563579
146.497 0.538509
149.927 0.514976
153.437 0.492894
157.029 0.47217
160.705 0.452712
164.468 0.434429
168.318 0.417237
172.259 0.401053
176.291 0.385801
180.419 0.371411
184.642 0.357819
188.965 0.344964
193.389 0.332792
197.917 0.321253
202.55 0.310302
207.292 0.299895
212.145 0.289995
217.112 0.280567
222.195 0.271579
227.397 0.263001
232.72 0.254807
238.169 0.246971
243.744 0.239472
249.451 0.232288
255.291 0.2254
261.268 0.21879
267.384 0.212443
273.644 0.206343
280.05 0.200476
286.607 0.19483
293.317 0.189393
300.184 0.184152
307.211 0.1791
314.404 0.174224
321.764 0.169518
329.297 0.164972
337.006 0.160579
344.896 0.156331
352.971 0.152222
361.234 0.148246
369.691 0.144396
378.346 0.140667
387.204 0.137054
396.269 0.133552
405.546 0.130156
415.04 0.126861
424.757 0.123665
434.701 0.120563
444.878 0.11755
455.294 0.114625
465.953 0.111783
476.861 0.109022
488.025 0.106338
499.451 0.103728
511.143 0.101191
523.11 0.098723
535.357 0.0963222
547.89 0.0939862
560.717 0.0917128
573.844 0.0894999
587.279 0.0873456
601.028 0.0852479
615.099 0.0832051
629.499 0.0812154
644.236 0.0792771
659.319 0.0773887
674.754 0.0755486
690.551 0.0737554
706.718 0.0720076
723.263 0.070304
740.196 0.0686432
757.525 0.067024
775.26 0.0654451
793.41 0.0639055
811.984 0.062404
830.994 0.0609395
850.449 0.0595111
870.359 0.0581177
890.735 0.0567583
911.589 0.055432
932.93 0.054138
954.772 0.0528753
977.124 0.0516432
1000 0.0504408 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 10
true true 0 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 10
true true 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
180 fnt3 4819 5800(@Graph )m 4819 5560(  width{7c} height{5c})m 4819 5320(  style{frame} xextra{0c} yextra{0c})m 4819 5080(  grid{yes})m
4819 4840(  xlog{10} ylog{10})m 4819 4600({)m 4819 4360(  @Data pairs{solid} color{black}{)m 4819 4120(    10 0.05 100 0.5 1000 0.05)m 4819 3880(  })m
4819 3640(  @Data pairs{solid} color{red} {)m 4819 3400(    # include data from "data/data1")m 4819 3160(  })m 4819 2920(})m 200 fnt1
0 2361(One)m 397(has)s 723(to)s 941(note)s 1349(that,)s
1755(for)s 2056(surch)s 2554(a)s 2711(graph,)s 3273(the)s
3581(data)s 3981(ha)s 4(v)k 3(e)k 4416(to)s
4634(be)s 4887(stored)s 5441(in)s 5662(a)s 5819(\207le)s
6138(that)s 6505(is)s 6698(generated)s 7539(by)s 7803(an)s
8057(e)s 3(xternal)k 8760(tool)s 0 2121(\(computing)m 963(en)s 8(vironment,)k
2051(scripting)s 2791(languages,)s 3676(\202\))s 3983(and)s 4320(included.)s
5093(The)s 5449(data)s 5830(in)s 6032(the)s 6321(\207le)s
6621(must)s 7058(be)s 7292(put)s 7597(in)s 7799(`x)s
8011(y')s 8204(tuples.)s 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 3 3
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Courier
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Symbol
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Courier
/Courierfnt3 vec2 /Courier LoutRecode
/fnt3 { /Courierfnt3 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
%%IncludeResource: font Symbol
/fnt4 { /Symbol LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5799 -1552(-)m 5906(3)s 6043(-)s 9066 13444 0 13444 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore
3969 2835 0 2835 200 240 50 567 10609 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 10 0.05 100 0.5 1000 0.05 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 0.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 10 0.0504408
10.2341 0.0516432
10.4737 0.0528753
10.7189 0.054138
10.9699 0.055432
11.2267 0.0567583
11.4895 0.0581177
11.7585 0.0595111
12.0338 0.0609395
12.3155 0.062404
12.6038 0.0639055
12.8989 0.0654451
13.2009 0.067024
13.5099 0.0686432
13.8262 0.070304
14.1499 0.0720076
14.4812 0.0737554
14.8202 0.0755486
15.1672 0.0773887
15.5223 0.0792771
15.8857 0.0812154
16.2576 0.0832051
16.6382 0.0852479
17.0277 0.0873456
17.4263 0.0894999
17.8343 0.0917128
18.2518 0.0939862
18.6791 0.0963222
19.1164 0.098723
19.564 0.101191
20.022 0.103728
20.4907 0.106338
20.9705 0.109022
21.4614 0.111783
21.9639 0.114625
22.4781 0.11755
23.0043 0.120563
23.5429 0.123665
24.094 0.126861
24.6581 0.130156
25.2354 0.133552
25.8262 0.137054
26.4308 0.140667
27.0496 0.144396
27.6829 0.148246
28.331 0.152222
28.9942 0.156331
29.673 0.160579
30.3677 0.164972
31.0787 0.169518
31.8063 0.174224
32.5509 0.1791
33.3129 0.184152
34.0929 0.189393
34.891 0.19483
35.7079 0.200476
36.5438 0.206343
37.3994 0.212443
38.2749 0.21879
39.171 0.2254
40.0881 0.232288
41.0266 0.239472
41.9871 0.246971
42.97 0.254807
43.976 0.263001
45.0056 0.271579
46.0592 0.280567
47.1375 0.289995
48.2411 0.299895
49.3705 0.310302
50.5263 0.321253
51.7092 0.332792
52.9198 0.344964
54.1587 0.357819
55.4266 0.371411
56.7243 0.385801
58.0523 0.401053
59.4113 0.417237
60.8022 0.434429
62.2257 0.452712
63.6825 0.47217
65.1734 0.492894
66.6992 0.514976
68.2607 0.538509
69.8588 0.563579
71.4943 0.590264
73.1681 0.618619
74.881 0.648668
76.6341 0.680384
78.4282 0.713664
80.2643 0.748304
82.1434 0.783958
84.0665 0.820103
86.0346 0.855997
88.0488 0.890659
90.1102 0.922869
92.2198 0.95122
94.3788 0.974225
96.5883 0.990494
98.8496 0.998931
101.164 0.998931
103.532 0.990494
105.956 0.974225
108.437 0.95122
110.975 0.922869
113.573 0.890659
116.232 0.855997
118.953 0.820103
121.738 0.783958
124.588 0.748304
127.505 0.713664
130.49 0.680384
133.545 0.648668
136.672 0.618619
139.871 0.590264
143.146 0.563579
146.497 0.538509
149.927 0.514976
153.437 0.492894
157.029 0.47217
160.705 0.452712
164.468 0.434429
168.318 0.417237
172.259 0.401053
176.291 0.385801
180.419 0.371411
184.642 0.357819
188.965 0.344964
193.389 0.332792
197.917 0.321253
202.55 0.310302
207.292 0.299895
212.145 0.289995
217.112 0.280567
222.195 0.271579
227.397 0.263001
232.72 0.254807
238.169 0.246971
243.744 0.239472
249.451 0.232288
255.291 0.2254
261.268 0.21879
267.384 0.212443
273.644 0.206343
280.05 0.200476
286.607 0.19483
293.317 0.189393
300.184 0.184152
307.211 0.1791
314.404 0.174224
321.764 0.169518
329.297 0.164972
337.006 0.160579
344.896 0.156331
352.971 0.152222
361.234 0.148246
369.691 0.144396
378.346 0.140667
387.204 0.137054
396.269 0.133552
405.546 0.130156
415.04 0.126861
424.757 0.123665
434.701 0.120563
444.878 0.11755
455.294 0.114625
465.953 0.111783
476.861 0.109022
488.025 0.106338
499.451 0.103728
511.143 0.101191
523.11 0.098723
535.357 0.0963222
547.89 0.0939862
560.717 0.0917128
573.844 0.0894999
587.279 0.0873456
601.028 0.0852479
615.099 0.0832051
629.499 0.0812154
644.236 0.0792771
659.319 0.0773887
674.754 0.0755486
690.551 0.0737554
706.718 0.0720076
723.263 0.070304
740.196 0.0686432
757.525 0.067024
775.26 0.0654451
793.41 0.0639055
811.984 0.062404
830.994 0.0609395
850.449 0.0595111
870.359 0.0581177
890.735 0.0567583
911.589 0.055432
932.93 0.054138
954.772 0.0528753
977.124 0.0516432
1000 0.0504408 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 10
true true 0 false 10 0.5 ft xset
0 0 [ false ] 1 alldata false false 10
true true 0 false 1 0.5 ft yset
norset
axesstyle
rundata 
grestore
end

grestore
180 fnt3 4819 13327(@Graph width{7c} height{5c})m
4819 13087(  style{axes} xorigin{10} yorigin{1})m 4819 12847(  grid{yes})m 4819 12607(  xlog{10} ylog{10})m 4819 12367({)m 4819 12127(  @Data pairs{solid} color{black}{)m
4819 11887(    10 0.05 100 0.5 1000 0.05)m 4819 11647(  })m 4819 11407(  @Data pairs{solid} color{red} {)m 4819 11167(    # include data from "data/data1")m 4819 10927(  })m
4819 10687(})m 200 fnt1 0 10102(Here,)m 496(as)s 724(well,)s
1177(a)s 1336(note)s 5(w)k 2(orth)k 1(y)k
2302(feature)s 2921(of)s 3168(the)s 180 fnt3 3479 10109(axes)m
200 fnt1 3982 10102(style:)m 4466(when)s 4967(the)s 5277(x)s
5445(axis)s 5828(is)s 6023(at)s 6238(the)s 6548(top)s
6869(of)s 7116(the)s 7426(graph,)s 7991(the)s 8301(labels)s
8828(are)s 0 9862(displayed)m 812(abo)s 3(v)k 3(e)k
1328(the)s 1617(axis,)s 2026(else)s 2380(the)s 3(y)k
2765(appeare)s 3429(belo)s 5(w)k 3956(the)s 4245(axis.)s
200 fnt2 0 9217(comb)m 508(data)s 933(vizualisation)s gsave
283 6683 translate
200 fnt1
3402 2268 0 2268 200 240 50 LoutGraphic
gsave
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ -2 0 -1 0 0 0 1 0.5 2 1 3 1.5 4 2 5 2.5 ] xandy
{  }
{ comb }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true false 0 false 0 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 false 0 0.5 ft yset
norset
axesstyle
rundata 
grestore
512 365 0 365 200 240 50 0 -365 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 137(t)m 200 fnt4 214 131([)m 200 fnt1
284 136(s)m 200 fnt4 363 131(])m grestore
grestore
812 375 0 375 200 240 50 0 -375 LoutGr2
0 3 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 100 144(y)m
200 fnt4 195 138(\()m 200 fnt5 265 144(t)m 200 fnt4
333 138(\))m 444([)s 200 fnt1 514 143(V)m 200 fnt4
663 138(])m grestore
grestore
end

grestore
180 fnt3 4252 8839(@Graph)m 4252 8599(  style{axes} xorigin{0} yorigin{0})m 4252 8359(  xticksep{2} xnsubtick{2})m
4252 8119(  objects{)m 4252 7879(    @N at{6 0} margin{0.5f} @M{t`[@R{s}]})m 4252 7639(    @E at{0 3} margin{0.5f} @M{y\(t\)`[@R{V}]})m 4252 7399(  })m 4252 7159(  color{red})m
4252 6919({)m 4252 6679(  @Data pairs{comb} linewidth{1p} {)m 4252 6439(    -2 0 -1 0 0 0 1 0.5 2 1 3 1.5 4 2 5 2.5)m 4252 6199(  })m 4252 5959(})m
gsave
283 3329 translate
200 fnt1 3402 2268 0 2268 200 240 50 LoutGraphic
gsave
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ -2 0 -1 0 0 0 1 0.5 2 1 3 -1.5 4 2 5 2.5 ] xandy
{ filledcircle }
{ comb }
{ /dashlength 0.2 ft def
	 /linewidth 2 pt def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true false 0 false 0 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 false 0 0.5 ft yset
norset
axesstyle
rundata 
grestore
512 365 0 365 200 240 50 0 -365 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 137(t)m 200 fnt4 214 131([)m
200 fnt1 284 136(s)m 200 fnt4 363 131(])m grestore
grestore
812 375 0 375 200 240 50 0 -375 LoutGr2
0 3 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5
100 144(y)m 200 fnt4 195 138(\()m 200 fnt5 265 144(t)m
200 fnt4 333 138(\))m 444([)s 200 fnt1 514 143(V)m
200 fnt4 663 138(])m grestore
grestore
end

grestore
200 fnt1 4252 5461(The)m 4619(line)s
4974(dra)s 3(wn)k 5527(with)s 5940(each)s 6363(point)s
6834(is)s 7019(referenced)s 7917(to)s 8127(the)s 8427(position)s
4252 5221(of)m 4491(the)s 4793(x)s 4952(axis)s 5327(\(de\207ned)s
6042(by)s 6301(the)s 200 fnt5 6603 5222(yorigin)m 200 fnt1
7236 5221(option\),)m 7914(or)s 8143(the)s 8445(axis)s 8821(de-)s
4252 4981(\207ned)m 4706(by)s 4957(the)s 180 fnt3 5252 4988(ymin)m
200 fnt1 5740 4981(v)m 5(alue)k 6218(de\207ned)s 6860(or)s
7082(calculated)s 7942(if)s 180 fnt3 8129 4988(yorigin)m 200 fnt1
8942 4981(is)m 4252 4741(not)m 4557(set.)s 4652 4429(The)m 200 fnt5
4999 4430(points)m 200 fnt1 5523 4429(option)m 6071(allo)s 5(w)k
6544(to)s 6733(put)s 7029(a)s 7158(symbol)s 7782(associated)s
8638(to)s 8827(the)s 4252 4189(point,)m 4751(as)s 4958(usual.)s
3402 2268 0 2268 200 240 50 283 690 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ -2 0 -1 0 0 0 1 0.5 2 1 3 -1.5 4 2 5 2.5 ] xandy
{ diamond }
{ comb }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.3 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true true 0.5 cm false 0 0.5 ft xset
2 2 [ false ] 1 alldata false false 0
true true 0.5	cm false 0 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
4252 2822(Ev)m 3(en)k 4706(though)s 5309(the)s 200 fnt5
5598 2823(axes)m 200 fnt1 5997 2822(style)m 6418(is)s 6592(not)s
6897(used.)s 180 fnt3 4252 2517(@Graph)m 4252 2277(  style{frame} grid{yes})m 4252 2037(  xorigin{0} yorigin{0})m
4252 1797(  xticksep{2} xnsubtick{2})m 4252 1557(  yticksep{2} ynsubtick{2})m 4252 1317({)m 4252 1077(  @Data pairs{comb} points{diamond})m 4252 837(    symbolsize{0.3f} color{red}{)m
4252 597(    -2 0 -1 0 0 0 1 0.5 2 1 3 -1.5 4 2 5 2.5)m 4252 357(  })m 4252 117(})m 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 4 4
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Symbol
%%+ font Courier
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
%%IncludeResource: font Symbol
/fnt4 { /Symbol LoutFont } def
%%IncludeResource: font Courier
/Courierfnt3 vec2 /Courier LoutRecode
/fnt3 { /Courierfnt3 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5795 -1552(-)m 5902(4)s 6047(-)s 9066 13446 0 13354 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore
200 fnt2 0 13308(On)m
313(the)s 625(use)s 948(of)s 1175(textur)s 3(es)k
200 fnt1 0 12997(An)m 291(e)s 3(xample)k 1008(of)s
1234(using)s 1710(a)s 1848(te)s 3(xture)k 2443(to)s
2642(emphasize)s 3527(an)s 3762(area)s 5670 3969 0 3969 200 240 50 1698 8745 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 2 0.1 5 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for
5 0 2 0 2 -1 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 0.2 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ true }
{ 1 1 1 45 dg 0 in 0 in
2
[ 0 0 1 pt 5 pt add dup ]
1 pt 5 pt add dup
{
pop 0 0 moveto
1 pt 5 pt add 0 lineto
0 1 pt rlineto
0 1 pt lineto
closepath fill
}
LoutMakeTexture LoutSetTexture }
]
[ [ -2 0 6 0 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -2 0.1 6 {	/xval exch def xval xval 2 sub xval 2 sub mul 1 sub } for ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
2 2 [ false ] 0 alldata false false 0
true true 0 false 0.0 0.5 ft xset
2 4 [ false ] 1 alldata false false 0
true true 0 false 0.0 0.5 ft yset
norset
axesstyle
rundata 
grestore
288 290 0 290 200 240 50 0 -290 LoutGr2
6 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5 100 102(x)m
grestore
grestore
1457 416 0 416 200 240 50 0 -416 LoutGr2
0 15 trpoint translate 0	ysize 2	div translate gsave
grestore
200 fnt5 100 141(y)m 200 fnt4 245 135(=)m 200 fnt5
412 141(a)m 140 fnt4 606 220(2)m 200 fnt5 518 141(x)m
200 fnt4 721 135(+)m 200 fnt5 876 141(b)m 981(x)s
200 fnt4 1117 135(+)m 200 fnt5 1272 141(c)m grestore
grestore
343 349 0 349 200 240 50 0 -349 LoutGr2
2 0 trpoint translate xsize	neg	2 div ysize translate gsave
grestore
200 fnt5
100 161(x)m 140 fnt4 188 100(1)m grestore
grestore
355 349 0 349 200 240 50 0 -349 LoutGr2
5 0 trpoint translate xsize	neg	2 div 0 translate gsave
grestore
200 fnt5 100 161(x)m
140 fnt4 188 100(2)m grestore
grestore
941 530 0 530 200 240 50 0 -530 LoutGr2
3.5 3 trpoint translate xsize	neg	ysize 2	div translate gsave
grestore
140 fnt5 1.0 0.0 0.0 LoutSetRGBColor 157 410(x)m
112 fnt4 219 363(2)m 338 fnt4 60 129(\362)m 140 fnt5
157 107(x)m 112 fnt4 219 60(1)m 200 fnt5 319 221(y)m
200 fnt4 414 215(\()m 200 fnt5 484 221(x)m 200 fnt4
582 215(\))m 200 fnt5 693 221(dx)m grestore
grestore
end

grestore
9066 10 0 10 200 240 50 0 8155 LoutGr2
LoutRule stroke
grestore

grestore
180 fnt3 0 7815(@Graph)m
0 7575(  style{axes} width{10c} height{7c})m 0 7335(  grid{yes})m 0 7095(  xorigin{0.0} yorigin{0.0})m 0 6855(  xticksep{2} xnsubtick{2})m 0 6615(  yticksep{4} ynsubtick{2})m
0 6375(  objects{)m 0 6135(    @N at{6 0} margin{0.5f} @M{x})m 0 5895(    @E at{0 15} margin{0.5f} @M{y=a x sup 2 + b x +c})m 0 5655(    @N at{2 0} margin{0.5f} @M{x sub 1})m 0 5415(    @S at{5 0} margin{0.5f} @M{x sub 2})m
0 5175(    @E at{3.5 3} red @Color @Math{int from{x sub 1} to{x sub 2} y\(x\) ` dx})m 0 4935(  })m 0 4695({)m 0 4455(  @Data color{red} pairs{solid} linewidth{0.2p})m 0 4215(    texture{ striped angle { 45d } gap{5p}} paint{yes}{)m
0 3975(    xloop from {2} to {5} by { 0.1 } do {)m 0 3735(      x {{x - 2} * {x - 2} - 1})m 0 3495(    })m 0 3255(    # close the surface)m 0 3015(    5 0 2 0 2 -1)m
0 2775(  })m 0 2535(  # Redraw the x axis \(nicer\))m 0 2295(  @Data pairs{solid} {-2 0 6 0})m 0 2055(  @Data color{red} pairs{solid} linewidth{1p} {)m 0 1815(    xloop from {-2} to {6} by { 0.1 } do {)m
0 1575(      x {{x - 2} * {x - 2} - 1})m 0 1335(    })m 0 1095(  })m 0 855(})m gsave
0 571 translate
200 fnt1
9066 10 0 10 200 240 50 LoutGraphic
gsave
LoutRule stroke
grestore

grestore
200 fnt1 0 195(W)m 16(e)k 304(dra)s 3(w)k
741(the)s 1027(curv)s 3(e)k 1509(tw)s 2(o)k
1847(times.)s 2361(The)s 2714(\207rst)s 3071(is)s 3242(to)s
3438(dra)s 3(w)k 3875(the)s 4161(te)s 3(xtured)k
4856(area.)s 5270(Note)s 5701(that)s 6046(we)s 6321(terminate)s
7114(by)s 7356(adding)s 7940(points)s 8466(to)s 8662(close)s

grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 5 5
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Italic
%%+ font Times-Bold
%%+ font Courier
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
%%IncludeResource: font Courier
/Courierfnt3 vec2 /Courier LoutRecode
/fnt3 { /Courierfnt3 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5799 -1554(-)m 5906(5)s 6044(-)s 9066 13442 0 13351 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore
0 13306(the)m 289(surf)s 2(ace.)k
947(The)s 1303(second)s 1905(time,)s 2347(we)s 2625(dra)s 3(w)k
3065(the)s 3354(curv)s 3(e)k 3839(on)s 4086(the)s
4375(full)s 200 fnt5 4697 13307(x)m 200 fnt1 4835 13306(axis.)m
200 fnt2 0 12661(Using)m 534(@Diag)s 1166(to)s 1378(add)s
1746(inf)s 5(ormation)k 2806(onto)s 3229(a)s 3377(graph)s
gsave
1698 8071 translate
200 fnt1 5670 4309 0 4309 200 240 50 LoutGraphic
gsave

200 ldiagbegin
grestore
5670 3969 0 3969 200 240 50 0 340 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0.245 1 0.245 2.5 ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1.245 1 1.245 2.5 ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -1.0 0.0
-0.9748743718593 0.0
-0.94974874371859 0.0
-0.92462311557789 0.0
-0.89949748743719 0.0
-0.87437185929648 0.0
-0.84924623115578 0.0
-0.82412060301508 0.0
-0.79899497487437 0.0
-0.77386934673367 0.0
-0.74874371859296 0.0
-0.72361809045226 0.0
-0.69849246231156 0.0
-0.67336683417085 0.0
-0.64824120603015 0.0
-0.62311557788945 0.0
-0.59798994974874 0.0
-0.57286432160804 0.0
-0.54773869346734 0.0
-0.52261306532663 0.0
-0.49748743718593 0.0
-0.47236180904523 0.0
-0.44723618090452 0.0
-0.42211055276382 0.0
-0.39698492462312 0.0
-0.37185929648241 0.0
-0.34673366834171 0.0
-0.321608040201 0.0
-0.2964824120603 0.0
-0.2713567839196 0.0
-0.24623115577889 0.0
-0.22110552763819 0.0
-0.19597989949749 0.0
-0.17085427135678 0.0
-0.14572864321608 0.0
-0.12060301507538 0.0
-0.095477386934673 0.0
-0.07035175879397 0.0
-0.045226130653266 0.0
-0.020100502512563 0.0
0.0050251256281408 2.0018695337786
0.030150753768844 1.9861773135295
0.055276381909548 1.9707308795511
0.080402010050251 1.9555263821081
0.10552763819095 1.9405600317638
0.13065326633166 1.9258280984348
0.15577889447236 1.9113269104621
0.18090452261307 1.8970528536955
0.20603015075377 1.883002370593
0.23115577889447 1.8691719593342
0.25628140703518 1.8555581729475
0.28140703517588 1.842157618451
0.30653266331658 1.8289669560069
0.33165829145729 1.8159828980888
0.35678391959799 1.8032022086631
0.38190954773869 1.7906217023817
0.4070351758794 1.7782382437883
0.4321608040201 1.7660487465374
0.4572864321608 1.7540501726244
0.48241206030151 1.742239531629
0.50753768844221 1.7306138799696
0.53266331658291 1.7191703201697
0.55778894472362 1.7079060001358
0.58291457286432 1.6968181124466
0.60804020100503 1.6859038936532
0.63316582914573 1.6751606235906
0.65829145728643 1.6645856246993
0.68341708542714 1.6541762613585
0.70854271356784 1.6439299392289
0.73366834170854 1.633844104606
0.75879396984925 1.6239162437841
0.78391959798995 1.6141438824293
0.80904522613065 1.6045245849632
0.83417085427136 1.5950559539554
0.85929648241206 1.5857356295268
0.88442211055276 1.5765612887605
0.90954773869347 1.5675306451235
0.93467336683417 1.5586414478966
0.95979899497487 1.5498914816134
0.98492462311558 1.5412785655084
1.0100502512563 1.5328005529732
1.035175879397 1.5244553310214
1.0603015075377 1.5162408197625
1.0854271356784 1.508154971883
1.1105527638191 1.5001957721363
1.1356783919598 1.4923612368406
1.1608040201005 1.4846494133845
1.1859296482412 1.4770583797399
1.2110552763819 1.4695862439835
1.2361809045226 1.4622311438252
1.2613065326633 1.4549912461435
1.286432160804 1.4478647465294
1.3115577889447 1.4408498688359
1.3366834170854 1.4339448647357
1.3618090452261 1.4271480132857
1.3869346733668 1.4204576204976
1.4120603015075 1.4138720189159
1.4371859296482 1.4073895672026
1.4623115577889 1.4010086497276
1.4874371859296 1.3947276761666
1.5125628140704 1.3885450811041
1.5376884422111 1.3824593236438
1.5628140703518 1.3764688870245
1.5879396984925 1.3705722782417
1.6130653266332 1.3647680276758
1.6381909547739 1.3590546887258
1.6633165829146 1.3534308374488
1.6884422110553 1.3478950722048
1.713567839196 1.3424460133079
1.7386934673367 1.3370823026819
1.7638190954774 1.331802603522
1.7889447236181 1.326605599962
1.8140703517588 1.3214899967459
1.8391959798995 1.316454518905
1.8643216080402 1.3114979114406
1.8894472361809 1.3066189390109
1.9145728643216 1.3018163856232
1.9396984924623 1.2970890543307
1.964824120603 1.2924357669345
1.9899497487437 1.2878553636897
2.0150753768844 1.2833467030162
2.0402010050251 1.2789086612147
2.0653266331658 1.2745401321861
2.0904522613065 1.2702400271562
2.1155778894472 1.2660072744042
2.1407035175879 1.2618408189955
2.1658291457286 1.257739622519
2.1909547738693 1.253702662828
2.2160804020101 1.2497289337858
2.2412060301508 1.2458174450146
2.2663316582915 1.241967221649
2.2914572864322 1.2381773040928
2.3165829145729 1.2344467477796
2.3417085427136 1.2307746229382
2.3668341708543 1.22716001436
2.391959798995 1.2236020211713
2.4170854271357 1.2200997566089
2.4422110552764 1.2166523477986
2.4673366834171 1.2132589355383
2.4924623115578 1.2099186740834
2.5175879396985 1.2066307309361
2.5427135678392 1.2033942866379
2.5678391959799 1.2002085345657
2.5929648241206 1.1970726807302
2.6180904522613 1.1939859435785
2.643216080402 1.190947553799
2.6683417085427 1.1879567541297
2.6934673366834 1.1850127991699
2.7185929648241 1.1821149551936
2.7437185929648 1.1792624999674
2.7688442211055 1.1764547225702
2.7939698492462 1.1736909232159
2.8190954773869 1.1709704130791
2.8442211055276 1.1682925141236
2.8693467336683 1.165656558933
2.894472361809 1.1630618905447
2.9195979899497 1.1605078622861
2.9447236180905 1.1579938376134
2.9698492462312 1.155519189953
2.9949748743719 1.1530833025451
3.0201005025126 1.1506855682903
3.0452261306533 1.1483253895981
3.070351758794 1.1460021782381
3.0954773869347 1.1437153551933
3.1206030150754 1.1414643505157
3.1457286432161 1.1392486031845
3.1708542713568 1.137067560966
3.1959798994975 1.1349206802763
3.2211055276382 1.1328074260454
3.2462311557789 1.1307272715842
3.2713567839196 1.1286796984531
3.2964824120603 1.1266641963327
3.321608040201 1.1246802628967
3.3467336683417 1.1227274036869
3.3718592964824 1.1208051319895
3.3969849246231 1.1189129687143
3.4221105527638 1.1170504422748
3.4472361809045 1.1152170884713
3.4723618090452 1.1134124503744
3.4974874371859 1.1116360782119
3.5226130653266 1.1098875292562
3.5477386934673 1.1081663677141
3.572864321608 1.1064721646183
3.5979899497487 1.1048044977203
3.6231155778894 1.1031629513853
3.6482412060302 1.1015471164886
3.6733668341709 1.0999565903134
3.6984924623116 1.0983909764508
3.7236180904523 1.0968498847009
3.748743718593 1.0953329309753
3.7738693467337 1.0938397372017
3.7989949748744 1.0923699312293
3.8241206030151 1.0909231467365
3.8492462311558 1.0894990231394
3.8743718592965 1.0880972055016
3.8994974874372 1.0867173444464
3.9246231155779 1.0853590960692
3.9497487437186 1.0840221218518
3.9748743718593 1.0827060885786
4.0 1.0814106682528 ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -1.0 -0.0
-0.9748743718593 -0.0
-0.94974874371859 -0.0
-0.92462311557789 -0.0
-0.89949748743719 -0.0
-0.87437185929648 -0.0
-0.84924623115578 -0.0
-0.82412060301508 -0.0
-0.79899497487437 -0.0
-0.77386934673367 -0.0
-0.74874371859296 -0.0
-0.72361809045226 -0.0
-0.69849246231156 -0.0
-0.67336683417085 -0.0
-0.64824120603015 -0.0
-0.62311557788945 -0.0
-0.59798994974874 -0.0
-0.57286432160804 -0.0
-0.54773869346734 -0.0
-0.52261306532663 -0.0
-0.49748743718593 -0.0
-0.47236180904523 -0.0
-0.44723618090452 -0.0
-0.42211055276382 -0.0
-0.39698492462312 -0.0
-0.37185929648241 -0.0
-0.34673366834171 -0.0
-0.321608040201 -0.0
-0.2964824120603 -0.0
-0.2713567839196 -0.0
-0.24623115577889 -0.0
-0.22110552763819 -0.0
-0.19597989949749 -0.0
-0.17085427135678 -0.0
-0.14572864321608 -0.0
-0.12060301507538 -0.0
-0.095477386934673 -0.0
-0.07035175879397 -0.0
-0.045226130653266 -0.0
-0.020100502512563 -0.0
0.0050251256281408 -0.0018695337786239
0.030150753768844 0.013822686470463
0.055276381909548 0.029269120448939
0.080402010050251 0.044473617891888
0.10552763819095 0.05943996823623
0.13065326633166 0.074171901565173
0.15577889447236 0.08867308953786
0.18090452261307 0.10294714630447
0.20603015075377 0.11699762940696
0.23115577889447 0.13082804066576
0.25628140703518 0.14444182705245
0.28140703517588 0.15784238154897
0.30653266331658 0.17103304399315
0.33165829145729 0.18401710191116
0.35678391959799 0.19679779133686
0.38190954773869 0.20937829761831
0.4070351758794 0.22176175621166
0.4321608040201 0.23395125346259
0.4572864321608 0.24594982737557
0.48241206030151 0.25776046837097
0.50753768844221 0.26938612003039
0.53266331658291 0.28082967983032
0.55778894472362 0.29209399986423
0.58291457286432 0.30318188755345
0.60804020100503 0.31409610634681
0.63316582914573 0.32483937640945
0.65829145728643 0.3354143753007
0.68341708542714 0.34582373864148
0.70854271356784 0.35607006077112
0.73366834170854 0.36615589539397
0.75879396984925 0.37608375621587
0.78391959798995 0.38585611757067
0.80904522613065 0.39547541503684
0.83417085427136 0.40494404604456
0.85929648241206 0.41426437047321
0.88442211055276 0.42343871123953
0.90954773869347 0.43246935487653
0.93467336683417 0.44135855210343
0.95979899497487 0.45010851838657
0.98492462311558 0.45872143449155
1.0100502512563 0.46719944702681
1.035175879397 0.47554466897857
1.0603015075377 0.48375918023749
1.0854271356784 0.49184502811704
1.1105527638191 0.49980422786372
1.1356783919598 0.50763876315936
1.1608040201005 0.51535058661553
1.1859296482412 0.52294162026014
1.2110552763819 0.5304137560165
1.2361809045226 0.53776885617484
1.2613065326633 0.54500875385646
1.286432160804 0.5521352534706
1.3115577889447 0.55915013116414
1.3366834170854 0.56605513526428
1.3618090452261 0.5728519867143
1.3869346733668 0.57954237950243
1.4120603015075 0.58612798108408
1.4371859296482 0.59261043279739
1.4623115577889 0.59899135027236
1.4874371859296 0.60527232383344
1.5125628140704 0.61145491889595
1.5376884422111 0.61754067635619
1.5628140703518 0.62353111297552
1.5879396984925 0.62942772175834
1.6130653266332 0.63523197232422
1.6381909547739 0.64094531127417
1.6633165829146 0.6465691625512
1.6884422110553 0.65210492779515
1.713567839196 0.65755398669209
1.7386934673367 0.66291769731815
1.7638190954774 0.66819739647798
1.7889447236181 0.67339440003797
1.8140703517588 0.67851000325414
1.8391959798995 0.68354548109504
1.8643216080402 0.68850208855944
1.8894472361809 0.69338106098913
1.9145728643216 0.69818361437685
1.9396984924623 0.7029109456693
1.964824120603 0.70756423306548
1.9899497487437 0.71214463631034
2.0150753768844 0.71665329698381
2.0402010050251 0.72109133878534
2.0653266331658 0.72545986781391
2.0904522613065 0.72975997284379
2.1155778894472 0.73399272559579
2.1407035175879 0.73815918100448
2.1658291457286 0.74226037748101
2.1909547738693 0.74629733717199
2.2160804020101 0.7502710662142
2.2412060301508 0.75418255498535
2.2663316582915 0.75803277835095
2.2914572864322 0.76182269590724
2.3165829145729 0.76555325222036
2.3417085427136 0.76922537706177
2.3668341708543 0.77283998563998
2.391959798995 0.77639797882865
2.4170854271357 0.77990024339111
2.4422110552764 0.78334765220137
2.4673366834171 0.78674106446166
2.4924623115578 0.7900813259166
2.5175879396985 0.79336926906393
2.5427135678392 0.79660571336207
2.5678391959799 0.79979146543429
2.5929648241206 0.80292731926978
2.6180904522613 0.8060140564215
2.643216080402 0.80905244620104
2.6683417085427 0.81204324587027
2.6934673366834 0.81498720083013
2.7185929648241 0.81788504480641
2.7437185929648 0.82073750003256
2.7688442211055 0.82354527742977
2.7939698492462 0.82630907678408
2.8190954773869 0.82902958692086
2.8442211055276 0.83170748587642
2.8693467336683 0.83434344106705
2.894472361809 0.83693810945534
2.9195979899497 0.83949213771389
2.9447236180905 0.84200616238655
2.9698492462312 0.84448081004699
2.9949748743719 0.8469166974549
3.0201005025126 0.84931443170971
3.0452261306533 0.8516746104019
3.070351758794 0.85399782176189
3.0954773869347 0.85628464480672
3.1206030150754 0.85853564948431
3.1457286432161 0.86075139681551
3.1708542713568 0.86293243903396
3.1959798994975 0.86507931972368
3.2211055276382 0.86719257395456
3.2462311557789 0.86927272841575
3.2713567839196 0.87132030154688
3.2964824120603 0.8733358036673
3.321608040201 0.87531973710325
3.3467336683417 0.87727259631309
3.3718592964824 0.87919486801047
3.3969849246231 0.88108703128571
3.4221105527638 0.88294955772516
3.4472361809045 0.88478291152872
3.4723618090452 0.88658754962559
3.4974874371859 0.88836392178809
3.5226130653266 0.8901124707438
3.5477386934673 0.89183363228588
3.572864321608 0.89352783538168
3.5979899497487 0.89519550227967
3.6231155778894 0.89683704861467
3.6482412060302 0.89845288351143
3.6733668341709 0.90004340968662
3.6984924623116 0.90160902354916
3.7236180904523 0.90315011529907
3.748743718593 0.90466706902467
3.7738693467337 0.90616026279832
3.7989949748744 0.9076300687707
3.8241206030151 0.90907685326346
3.8492462311558 0.91050097686062
3.8743718592965 0.91190279449838
3.8994974874372 0.91328265555358
3.9246231155779 0.91464090393083
3.9497487437186 0.91597787814815
3.9748743718593 0.91729391142139
4.0 0.91858933174725 ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ -1.0 0.0
-0.9748743718593 0.0
-0.94974874371859 0.0
-0.92462311557789 0.0
-0.89949748743719 0.0
-0.87437185929648 0.0
-0.84924623115578 0.0
-0.82412060301508 0.0
-0.79899497487437 0.0
-0.77386934673367 0.0
-0.74874371859296 0.0
-0.72361809045226 0.0
-0.69849246231156 0.0
-0.67336683417085 0.0
-0.64824120603015 0.0
-0.62311557788945 0.0
-0.59798994974874 0.0
-0.57286432160804 0.0
-0.54773869346734 0.0
-0.52261306532663 0.0
-0.49748743718593 0.0
-0.47236180904523 0.0
-0.44723618090452 0.0
-0.42211055276382 0.0
-0.39698492462312 0.0
-0.37185929648241 0.0
-0.34673366834171 0.0
-0.321608040201 0.0
-0.2964824120603 0.0
-0.2713567839196 0.0
-0.24623115577889 0.0
-0.22110552763819 0.0
-0.19597989949749 0.0
-0.17085427135678 0.0
-0.14572864321608 0.0
-0.12060301507538 0.0
-0.095477386934673 0.0
-0.07035175879397 0.0
-0.045226130653266 0.0
-0.020100502512563 0.0
0.0050251256281408 0.012599048624893
0.030150753768844 0.049156007570245
0.055276381909548 0.1080122957424
0.080402010050251 0.18701167660503
0.10552763819095 0.28356916658233
0.13065326633166 0.39474834238658
0.15577889447236 0.51734487502787
0.18090452261307 0.64797403329391
0.20603015075377 0.78315987288077
0.23115577889447 0.91942385792263
0.25628140703518 1.0533707468511
0.28140703517588 1.1817697104845
0.30653266331658 1.301628832048
0.33165829145729 1.4102613605233
0.35678391959799 1.5053423435923
0.38190954773869 1.5849545471404
0.4070351758794 1.6476228670801
0.4321608040201 1.6923367482007
0.4572864321608 1.7185604359105
0.48241206030151 1.7262311923578
0.50753768844221 1.715745901145
0.53266331658291 1.6879367578632
0.55778894472362 1.6440369908651
0.58291457286432 1.5856377727807
0.60804020100503 1.5146376639165
0.63316582914573 1.4331860705215
0.65829145728643 1.3436223016933
0.68341708542714 1.2484118672288
0.70854271356784 1.1500816749011
0.73366834170854 1.0511557604001
0.75879396984925 0.954093118439
0.78391959798995 0.86122910215155
0.80904522613065 0.77472172353944
0.83417085427136 0.69650402473358
0.85929648241206 0.62824350313348
0.88442211055276 0.57130936843698
0.90954773869347 0.52674819180817
0.93467336683417 0.49526828272661
0.95979899497487 0.47723290317769
0.98492462311558 0.47266220739197
1.0100502512563 0.4812435836423
1.035175879397 0.5023498775758
1.0603015075377 0.53506479858985
1.0854271356784 0.57821465564505
1.1105527638191 0.63040543974748
1.1356783919598 0.69006416949421
1.1608040201005 0.7554833451517
1.1859296482412 0.82486731653195
1.2110552763819 0.8963793604661
1.2361809045226 0.96818828421331
1.2613065326633 1.0385134202286
1.286432160804 1.1056669532353
1.3115577889447 1.1680926198062
1.3366834170854 1.2243999404572
1.3618090452261 1.2733932809913
1.3869346733668 1.3140951895905
1.4120603015075 1.3457636148396
1.4371859296482 1.3679027732748
1.4623115577889 1.380267599003
1.4874371859296 1.3828618683826
1.5125628140704 1.375930245829
1.5376884422111 1.3599446389846
1.5628140703518 1.3355853795957
1.5879396984925 1.3037178577593
1.6130653266332 1.2653653295279
1.6381909547739 1.2216786895023
1.6633165829146 1.1739040499012
1.6884422110553 1.1233489951195
1.713567839196 1.0713483860046
1.7386934673367 1.0192305715728
1.7638190954774 0.96828482873794
1.7889447236181 0.91973079441428
1.8140703517588 0.87469058106281
1.8391959798995 0.83416417872619
1.8643216080402 0.79900864648199
1.8894472361809 0.76992148688248
1.9145728643216 0.74742848133608
1.9396984924623 0.73187614556842
1.964824120603 0.7234288453111
1.9899497487437 0.72207049614604
2.0150753768844 0.72761066076007
2.0402010050251 0.73969475429443
2.0653266331658 0.75781797628032
2.0904522613065 0.78134250778092
2.1155778894472 0.80951744639395
2.1407035175879 0.84150090089366
2.1658291457286 0.87638363228645
2.1909547738693 0.91321360928136
2.2160804020101 0.95102084358645
2.2412060301508 0.98884188358624
2.2663316582915 1.0257433730142
2.2914572864322 1.060844123043
2.3165829145729 1.0933352003081
2.3417085427136 1.1224975980385
2.3668341708543 1.1477171307549
2.391959798995 1.1684962728438
2.4170854271357 1.1844627455301
2.4422110552764 1.1953747431593
2.4673366834171 1.2011227760361
2.4924623115578 1.2017281912511
2.5175879396985 1.1973385129223
2.5427135678392 1.1882198172707
2.5678391959799 1.1747464242825
2.5929648241206 1.1573882449994
2.6180904522613 1.1366961705993
2.643216080402 1.1132859255294
2.6683417085427 1.0878208315046
2.6934673366834 1.0609939419315
2.7185929648241 1.0335100073318
2.7437185929648 1.0060677219571
2.7688442211055 0.97934268063033
2.7939698492462 0.95397144377414
2.8190954773869 0.93053706868317
2.8442211055276 0.90955641761526
2.8693467336683 0.89146949963903
2.894472361809 0.87663104489192
2.9195979899497 0.86530444856085
2.9447236180905 0.85765815910699
2.9698492462312 0.85376452261038
2.9949748743719 0.85360103415046
3.0201005025126 0.85705388931591
3.0452261306533 0.86392367557745
3.070351758794 0.87393299553704
3.0954773869347 0.88673577298417
3.1206030150754 0.90192795904892
3.1457286432161 0.91905933013664
3.1708542713568 0.93764605213829
3.1959798994975 0.9571836767918
3.2211055276382 0.97716023596536
3.2462311557789 0.99706910777649
3.2713567839196 1.01642134439
3.2964824120603 1.0347571744148
3.321608040201 1.0516564222478
3.3467336683417 1.0667476215686
3.3718592964824 1.0797156394378
3.3969849246231 1.0903076699875
3.4221105527638 1.0983375013659
3.4472361809045 1.1036880052319
3.4723618090452 1.106311843544
3.4974874371859 1.1062304315252
3.5226130653266 1.103531237472
3.5477386934673 1.0983635385527
3.572864321608 1.0909327860617
3.5979899497487 1.0814937630469
3.6231155778894 1.0703427412411
3.6482412060302 1.0578088623689
3.6733668341709 1.0442449809295
3.6984924623116 1.0300182113438
3.7236180904523 1.0155004219765
3.748743718593 1.0010589121924
3.7738693467337 0.98704749663125
3.7989949748744 0.973798203758
3.8241206030151 0.96161377405254
3.8492462311558 0.95076111762336
3.8743718592965 0.94146586231501
3.8994974874372 0.93390809234052
3.9246231155779 0.92821934494345
3.9497487437186 0.92448089943013
3.9748743718593 0.92272335994951
4.0 0.92292750144195 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true true 0 false 0.0 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true true 0 false 0.0 0.5 ft yset
norset
axesstyle
rundata 
grestore
124 124 0 124 200 240 50 0 -124 LoutGr2
0.245 2.5 trpoint translate xsize neg 2	div	ysize 2	div translate gsave
grestore
4 4 2 2 200 240 50 60 60 LoutGr2
(A) ldiagpushtagdict
grestore
4 4 2 2 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagbox ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
grestore
grestore
124 124 0 124 200 240 50 0 -124 LoutGr2
1.245 2.5 trpoint translate xsize neg 2	div	ysize 2	div translate gsave
grestore
4 4 2 2 200 240 50 60 60 LoutGr2
(B) ldiagpushtagdict
grestore
4 4 2 2 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagbox ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{} ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpopuptagdict
grestore
grestore
grestore
end

grestore
0 4309 0 4309 200 240 50 5670 0 LoutGr2
1 ldiaglinkbegin 
[ (0.5f) ldiagdecodelength
(0.5f) ldiagdecodelength
{ A } { B }
0.8 ft 0.8 ft ldiaglinepath ] 0.2 ft [ /ldiagsolid ] 0.04 ft ldiaglinkend
grestore
0 0 0 0 200 240 50 0 4309 LoutGr2
() ldiagpushtagdict
grestore
0 0 0 0 200 240 50 0 0 LoutGr2
{ FROM } (ANGLE) ldiagdolabel 180 dg add rotate 1 1 scale newpath clip gsave
grestore
100 60 50 30 200 240 50 -50 -30 LoutGr2
(LABEL) ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagsolidcurvedarrowhead ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{  null LoutSetTexture fill } ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
0 0 0 0 200 240 50 0 0 LoutGr2
{ LABEL } (W) ldiagdolabel FROM ldiagpsub 0 0 ldiagpadd translate { FROM } (ANGLE) ldiagdolabel 180 dg add rotate 1 1 scale gsave
grestore
100 60 50 30 200 240 50 -50 -30 LoutGr2
(LABEL) ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagsolidcurvedarrowhead ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{  null LoutSetTexture fill } ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
ldiagpoptagdict
grestore
0 0 0 0 200 240 50 0 4309 LoutGr2
() ldiagpushtagdict
grestore
0 0 0 0 200 240 50 0 0 LoutGr2
0 dg rotate 1 1 scale newpath clip gsave
grestore
201 252 40 143 200 240 50 -40 -143 LoutGr2
(LABEL) ldiagpushtagdict
grestore
201 252 40 143 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
201 252 40 143 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
160 fnt5 40 108(T)m 112 fnt5 108 63(p)m
ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
0 0 0 0 200 240 50 0 0 LoutGr2
/XP1 [ { LABEL } { (SE) } { (W) } { (S) } { (W) }
{ (S) } { (SW) } { (SE) } { (SW) } { LMID } (ANGLE) ldiagdolabel ldiagquadcase ldiagdolabel ] cvx def
/XP2 [ { LABEL } (CTR) ldiagdolabel ] cvx def
/XANG [ { LMID } (ANGLE) ldiagdolabel ] cvx def
/XTH [ XANG 90 dg sub XP1 XP2 ldiagangleto sub ] cvx def
/XDIST [ XP1 XP2 ldiagdistance XTH sin mul ] cvx def
XP1 LMID ldiagpsub 0 0 XDIST XANG ldiagatangle ldiagpadd 0 0 ldiagpadd translate 0 dg rotate 1 1 scale gsave
grestore
201 252 40 143 200 240 50 -40 -143 LoutGr2
(LABEL) ldiagpushtagdict
grestore
201 252 40 143 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
201 252 40 143 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
160 fnt5 40 108(T)m 112 fnt5 108 63(p)m ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
ldiagpoptagdict
grestore
0 4309 0 4309 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
0 0 0 0 200 240 50 0 4309 LoutGr2
{ TO } (ANGLE) ldiagdolabel rotate 1 1 scale newpath clip gsave
grestore
100 60 50 30 200 240 50 -50 -30 LoutGr2
(LABEL) ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagsolidcurvedarrowhead ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{  null LoutSetTexture fill } ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
0 0 0 0 200 240 50 0 4309 LoutGr2
{ LABEL } (W) ldiagdolabel TO ldiagpsub 0 0 ldiagpadd translate { TO } (ANGLE) ldiagdolabel rotate 1 1 scale gsave
grestore
100 60 50 30 200 240 50 -50 -30 LoutGr2
(LABEL) ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
[ ldiagbox ] pop
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
() ldiagpushtagdict
grestore
100 60 50 30 200 240 50 0 0 LoutGr2
ldiagnodebegin [ ldiagsolidcurvedarrowhead ] 0.2 ft
[ /ldiagnoline ] 0.04 ft
{  }
{  null LoutSetTexture fill } ldiagnodeend
(IN) ldiagpushtagdict
grestore
ldiagpopuptagdict
grestore
ldiagpoptagdict
grestore

grestore
ldiagpopuptagdict
grestore
grestore
grestore
ldiagpoptagdict
grestore

grestore
ldiagend

grestore
gsave
0 7821 translate
200 fnt1
9066 10 0 10 200 240 50 LoutGraphic
gsave
LoutRule stroke
grestore

grestore
180 fnt3 0 7481(@Diag{)m 0 7241(  @Graph)m 0 7001(    style{axes} width{10c} height{7c})m 0 6761(    grid{yes})m
0 6521(    xorigin{0.0} yorigin{0.0})m 0 6281(    objects {)m 0 6041(      @CTR at{0.245 2.5} {A::@Node margin{0.01f} outlinestyle{noline}})m 0 5801(      @CTR at{1.245 2.5} {B::@Node margin{0.01f} outlinestyle{noline}})m 0 5561(    })m
0 5321(  {)m 0 5081(    @Data pairs{dashed} {0.245 1 0.245 2.5})m 0 4841(    @Data pairs{dashed} {1.245 1 1.245 2.5})m 0 4601(    @Data pairs{dashed} {)m 0 4361(      # include {"data/data3"})m
0 4121(    })m 0 3881(    @Data pairs{dashed} {)m 0 3641(      # include {"data/data4"})m 0 3401(    })m 0 3161(    @Data color{red} pairs{solid} linewidth{1p} {)m
0 2921(      include {"data/data2"})m 0 2681(    })m 0 2441(  })m 0 2201(  @Link arrow{both} arrowstyle{curvedsolid} backarrowstyle{curvedsolid})m 0 1961(    ylabel{@M{T tsub p}} from{A} to{B})m
0 1721(})m gsave
0 1437 translate
200 fnt1 9066 10 0 10 200 240 50 LoutGraphic
gsave
LoutRule stroke
grestore

grestore
200 fnt1 0 1061(Arro)m 5(ws)k
640(can')s 3(t)k 1090(be)s 1330(added)s 1862(through)s
2537(the)s 2832(@Graph)s 3569(symbol,)s 4251(so)s 4478(we)s
4763(use)s 5080(the)s 5375(@Diag)s 5996(symbol,)s 6679(de\207ne)s
7218(the)s 7513(tw)s 2(o)k 7861(points)s 200 fnt5
8396 1062(A)m 200 fnt1 8565 1061(and)m 200 fnt5 8909 1062(B)m
200 fnt1 9027 1061(,)m 0 821(and)m 337(use)s 648(them)s
1096(to)s 1295(dra)s 3(w)k 1735(the)s 2024(arro)s 5(w)k
2528(between)s 3238(thes)s 3600(tw)s 2(o)k 3941(points.)s

grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 6 6
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Bold
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Bold
/Times-Boldfnt2 vec2 /Times-Bold LoutRecode
/fnt2 { /Times-Boldfnt2 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5796 -1553(-)m 5903(6)s 6047(-)s 9066 13443 0 13443 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore
9066 10 0 10 200 240 50 0 13433 LoutGr2
LoutRule stroke
grestore

grestore
200 fnt2 3340 13055(Lout)m
3800(User')s 7(s)k 4378(Guide)s 4945(examples)s gsave
0 12764 translate
200 fnt1
9066 10 0 10 200 240 50 LoutGraphic
gsave
LoutRule stroke
grestore

grestore
200 fnt1 0 12388(F)m 3(or)k 324(memory)s 13(,)k
1064(the)s 1353(\207gures)s 1937(used)s 2351(in)s 2553(the)s
2842(User')s 11(s)k 3391(Guide)s 3924(rendered)s 4669(by)s
4914(the)s 5203(modi\207ed)s 5961(module.)s 2859 11969(Ne)m 5(w)k
3275(South)s 3789(W)s 16(ales)k 4311(road)s 4714(deaths,)s
5311(1960\2111990)s 3038 11729(\(f)m 2(atalities)k 3826(per)s 4130(100)s
4476(million)s 5098(v)s 3(ehicle)k 5715(km\))s 3402 2268 0 2268 200 240 50 2832 9135 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1963 5.6 1971 4.3 1976 3.7 1979 3.4 1982 2.9 1985 2.3 1988 2.0 ] xandy
{ plus }
{ ilinesetup dashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3402 2268 0 2268 200 240 50 2832 6047 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1 1.10 2 1.21 3 1.33 4 1.46 5 1.61 6 1.77 7 1.95 8 2.14 ] xandy
{ plus }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1 1.20 2 1.44 3 1.73 4 2.07 5 2.45 6 2.99 7 3.58 8 4.30 ] xandy
{ circle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
gsave
500 2901 translate
90.0000 rotate
160 fnt1
0 -36(counts)m 451(\(%\))s 
grestore
gsave
1131 1258 translate
160 fnt1 6804 3969 0 3969 160 240 40 LoutGraphic
gsave
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 0.0 1 9.5 2 15.0 3 18.2 4 20.1 5 22.1 7 25.0
10 28.3 15 31.2 20 35.0 30 40.0 60 50.8 ] xandy
{ filledsquare }
{ ilinesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 0 0.0 1 3.7 1.5 43.1 2 99.1 3 85.6 4 69.1 5 47.0 6 44.1 7 40.8
10 35.0 15 29.4 20 25.0 30 21.1 60 15.5 ] xandy
{ square }
{ ilinesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0 false 0 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 false 0 0.5 ft yset
norset
axesstyle
rundata 
grestore
end

grestore
160 fnt1 4199 877(time)m
4519(\(min\))s 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 7 7
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Symbol
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Symbol
/fnt4 { /Symbol LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5798 -1549(-)m 5905(7)s 6045(-)s 9066 13448 0 13448 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore
2859 13312(Ne)m 5(w)k
3275(South)s 3789(W)s 16(ales)k 4311(road)s 4714(deaths,)s
5311(1960\2111990)s 3038 13072(\(f)m 2(atalities)k 3826(per)s 4130(100)s
4476(million)s 5098(v)s 3(ehicle)k 5715(km\))s 3402 2268 0 2268 200 240 50 2832 10478 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1963 5.6 1971 4.3 1976 3.7 1979 3.4 1982 2.9 1985 2.3 1988 2.0 ] xandy
{ plus }
{ ilinesetup dashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm true false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3402 1701 0 1701 200 240 50 2832 7957 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1 2.1 10 3.4 100 4.9 1000 6.1 10000 7.2 100000 7.6 ] xandy
{ plus }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ 1 (1) 10 (10) 100 (10^2) 1000 (10^3) 10000 (10^4) 100000 (10^5) ] 0 alldata false false 10
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3402 3402 0 3402 200 240 50 2781 3735 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 340
1 410
2 430
3 340
4 290
5 175
6 140
7 125
8 110
9 100
10 85
11 175
12 0 ] xandy
{  }
{ filledyhisto }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 0.0 0.0 1.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [  ] 0 alldata 0 12 0
true false 0 cm false false 0 cm xset
0 0 [  ] 1 alldata 0 450 0
true false 0 cm false false 0.5 ft yset
0 0 [ 0 lgen 50 lgen 100 lgen 150 lgen 200 lgen 250 lgen 300 lgen 350 lgen 400 lgen 450 lgen ] 1 alldata 0 450 0
0 cm false false 0.5 ft rset
framestyle
rundata drawframe
grestore
end

grestore
gsave
6871 6123 translate
-90.0000 rotate
0 -45(Precipitation)m
1063(mm)s 
grestore
gsave
2193 4814 translate
90.0000 rotate
0 -45(T)m 14(emperature)k 200 fnt4 1048 -50(\260)m
200 fnt1 1118 -45(C)m 
grestore
3402 3402 0 3402 200 240 50 2781 3735 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0.0 24
1.0 24
2.0 25
3.0 26
4.0 26
5.0 26
6.0 26
7.0 27
8.0 26
9.0 27
10.0 28
11.0 28
12.0 26 ] xandy
{  }
{ linesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth 1 pt def 1.0 0.0 0.0 LoutSetRGBColor
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ 0.5 (J)
1.5 (F)
2.5 (M)
3.5 (A)
4.5 (M)
5.5 (J)
6.5 (J)
7.5 (A)
8.5 (S)
9.5 (O)
10.5 (N)
11.5 (D) ] 0 alldata 0 12 0
true false 0 cm false false 0 cm xset
0 0 [ -30 lgen -20 lgen -10 lgen 0 lgen 10 lgen 20 lgen 30 lgen 40 lgen ] 1 alldata -30 50 0
true false 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore

grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 8 8
%%BeginPageSetup
%%PageResources: font Times-Roman
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5798 -1552(-)m 5905(8)s 6044(-)s 9066 13444 0 13444 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore
2108 13308(Estimated)m 2952(population)s
3852(of)s 4078(Boston,)s 4732(Ne)s 5(w)k 5148(Y)s 22(ork,)k
5625(and)s 5962(Philadelphia)s 3402 2268 0 2268 200 240 50 2831 10714 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1720 12000 1730 13000 1740 15601 1760 15631 1770 15877 ] xandy
{ plus }
{ ilinesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1720 7000 1730 8622 1740 10451 1750 14255 1760 18000 1770 22667 ] xandy
{ plus }
{ ilinesetup dashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1720 10000 1730 11500 1740 12654 1750 18202 1760 23750 1770 34583 ] xandy
{ plus }
{ ilinesetup	dotdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3134 9758(Computer)m 3981(Science)s 4645(3)s
4782(Results)s 5409(\(1993\))s 1103 8351(Number)m 1806(of)s 1220 8111(students)m
3402 2268 0 2268 200 240 50 2832 7164 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 1 10 3 20 2 30 4 40 15 50 60 60 58 70 28 80 15 90 7 100 0 ] xandy
{  }
{ yhisto }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false 80 0
true false 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3931 6405(Final)m 4386(mark)s 4846(\(%\))s 3134 5754(Computer)m 3981(Science)s
4645(3)s 4782(Results)s 5409(\(1993\))s 1103 4347(Number)m 1806(of)s
1220 4107(students)m 3402 2268 0 2268 200 240 50 2832 3160 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 1 10 3 20 2 30 4 40 15 50 60 60 58 70 28 80 15 90 7 100 0 ] xandy
{  }
{ surfaceyhisto }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false 80 0
true false 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3931 2401(Final)m 4386(mark)s 4846(\(%\))s 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 9 9
%%BeginPageSetup
%%PageResources: font Times-Roman
%%+ font Times-Italic
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
%%IncludeResource: font Times-Italic
/Times-Italicfnt5 vec2 /Times-Italic LoutRecode
/fnt5 { /Times-Italicfnt5 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5797 -1552(-)m 5904(9)s 6046(-)s 9066 13442 0 13442 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore
2827 13306(Fertility)m 3512(rates)s
3928(in)s 4130(some)s 4596(de)s 5(v)k 3(eloping)k
5518(countries)s 3402 2268 0 2268 200 240 50 2832 10712 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 1 3.2 2 2.2 3 3.0 4 3.5 5 2.8 6 5.9 7 4.8 8 5.3 9 ] xandy
{  }
{ filledxhisto }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false 8 0
true false 0 cm false false 0.5 ft xset
0 0 [ 1.5 (Turkey) 2.5 (Thailand) 3.5 (Indonesia) 4.5 (Costa Rica)
5.5 (Colombia) 6.5 (Cameroon) 7.5 (Botswana) 8.5 (Bangladesh) ] 1 alldata false false 0
true false 0 cm false false 0 cm yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3402 2268 0 2268 200 240 50 2832 7624 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 0.00 1 1.00 2 1.50 3 1.83 4 2.08 5 2.28 6 2.45 ] xandy
{  }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ true }
{ 1 1 1 45 dg 0 in 0 in
2
[ 0 0 2 pt 2 mul dup ]
2 pt 2 mul dup
{
pop 0 0 moveto
2 pt 0 rlineto
0 2 pt rlineto
2 pt neg 0 rlineto
closepath
2 pt 2 pt moveto
2 pt 0 rlineto
0 2 pt rlineto
2 pt neg 0 rlineto
closepath fill
}
LoutMakeTexture LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
3402 2268 0 2268 200 240 50 2832 4536 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 0 0.00 1 1.00 2 1.50 3 1.83 4 2.08 5 2.28 6 2.45 7 0 ] xandy
{  }
{ filledyhisto }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ 1 1 1 45 dg 0 in 0 in
2
[ 0 0 1 pt 1 pt add dup ]
1 pt 1 pt add dup
{
pop 0 0 moveto
1 pt 1 pt add 0 lineto
0 1 pt rlineto
0 1 pt lineto
closepath fill
}
LoutMakeTexture LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
160 fnt1 316 2545(Right)m 710(shell)s 1048(nodes)s
4536 2268 0 2268 160 240 40 2265 1448 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 10 1.97 50 2.01 100 2.00 200 2.0 500 2.00 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 10 3.53 50 7.45 100 9.32 200 13.41 500 21.63 ] xandy
{ filledcircle }
{  }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 10 2 500 2 ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 10 20 500 {	/xval exch def xval 3.14159 xval mul 4 div sqrt 1 add } for ] xandy
{  }
{ linesetup cdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ 10 lgen 50 lgen 100 lgen 200 lgen 500 lgen ] 0 alldata false false 0
true false 0 false 0 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0 false 0 0.5 ft yset
norset
axesstyle
rundata 
grestore
867 238 0 238 160 240 40 0 -238 LoutGr2
300 2 trpoint translate 0	ysize translate gsave
grestore
160 fnt5 48 81(Exponential)m grestore
grestore
634 237 0 237 160 240 40 0 -237 LoutGr2
300 3.14159 300 4 div mul sqrt 1 add trpoint translate 0	0 translate gsave
grestore
160 fnt5 48 81(Uniform)m grestore
grestore
end

grestore
160 fnt5
4495 1106(n)m 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
1 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Page: 10 10
%%BeginPageSetup
%%PageResources: font Times-Roman
/pgsave save def
%%IncludeResource: font Times-Roman
/Times-Romanfnt1 vec2 /Times-Roman LoutRecode
/fnt1 { /Times-Romanfnt1 LoutFont } def
0.0500 dup scale 10 setlinewidth
%%EndPageSetup
gsave
0 0 translate
200 fnt1 0.0 0.0 0.0 LoutSetRGBColor LoutTextureSolid 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutPageSet
grestore
gsave
0 0 translate
1.0 1.0 1.0 LoutSetRGBColor 11900 16840 0 16840 200 240 50 LoutGraphic
gsave
LoutBox gsave 1.0 1.0 1.0 LoutSetRGBColor  fill grestore 0 cm setlinewidth stroke
grestore
gsave
0 16840 translate
0.0000 rotate
0.0 0.0 0.0 LoutSetRGBColor
5745 -1552(-)m 5852(10)s 6098(-)s 9066 13444 0 13444 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore
3402 2268 0 2268 200 240 50 2832 11176 LoutGr2
grestore

gsave xsize ysize lgraphdict begin	/ysize exch	def
/xsize	exch def /alldata [ [ [ 1720 12000 1730 13000 1740 15601 1760 15631 1770 15877 ] xandy
{ plus }
{ ilinesetup solid }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1720 7000 1730 8622 1740 10451 1750 14255 1760 18000 1770 22667 ] xandy
{ plus }
{ ilinesetup dashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
]
[ [ 1720 10000 1730 11500 1740 12654 1750 18202 1760 23750 1770 34583 ] xandy
{ plus }
{ ilinesetup	dotdashed }
{ /dashlength 0.2 ft def
	 /linewidth currentlinewidth def 
	 /symbolsize 0.15 ft def
	 /symbollinewidth currentlinewidth def	}
{ false }
{ null LoutSetTexture }
] ] def
0 0 [ false ] 0 alldata false false 0
true false 0.5 cm false false 0.5 ft xset
0 0 [ false ] 1 alldata false false 0
true false 0.5	cm false false 0.5 ft yset
norset
framestyle
rundata drawframe
grestore
end

grestore
60 60 30 30 200 240 50 6517 12521 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
200 0 0 0 200 240 50 6627 12551 LoutGr2
xsize 0 lgraphdict begin	newpath	0 0	moveto lineto
/linewidth currentlinewidth def xsize 0.2 ft solid	end
grestore

grestore
60 60 30 30 200 240 50 6877 12521 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
7037 12506(Boston)m 60 60 30 30 200 240 50 6517 12281 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
200 0 0 0 200 240 50 6627 12311 LoutGr2
xsize 0 lgraphdict begin	newpath	0 0	moveto lineto
/linewidth currentlinewidth def xsize 0.2 ft dashed end
grestore

grestore
60 60 30 30 200 240 50 6877 12281 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
7037 12266(Ne)m 5(w)k
7453(Y)s 22(ork)k 60 60 30 30 200 240 50 6517 12041 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
200 0 0 0 200 240 50 6627 12071 LoutGr2
xsize 0 lgraphdict begin	newpath	0 0	moveto lineto
/linewidth currentlinewidth def xsize 0.2 ft dotdashed	end
grestore

grestore
60 60 30 30 200 240 50 6877 12041 LoutGr2
lgraphdict begin	xmark ymark	xmark currentlinewidth doplus
grestore
end
grestore
7037 12026(Philadelphia)m 
grestore
0 0 0 0 200 240 50 1417 -15423 LoutGr2
0 LoutMargSet
grestore

grestore

grestore

grestore

grestore

pgsave restore
showpage

%%Trailer
%%DocumentNeededResources: font Times-Roman
%%+ font Times-Bold
%%+ font Times-Italic
%%+ font Courier
%%+ font Symbol
%%DocumentSuppliedResources: procset LoutStartUp
%%+  procset LoutDiagPrependGraphic
%%+  procset LoutGraphPrependGraphic
%%+  procset LoutBasicSetup
%%+ encoding vec2
%%Pages: 10
%%EOF
